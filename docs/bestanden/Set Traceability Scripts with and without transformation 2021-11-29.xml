<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{108670E1-04D1-4318-9A6A-557E9B58D9DC}"/>
			<Column name="ScriptAuthor" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability with Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC 1 VNG Realisatie scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2016-02-08&#xA;'&#xA;SetTraceability true"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="1 VNG Realisatie scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C20CE956-05AD-423f-AF8D-724487E6EA96}"/>
			<Column name="ScriptAuthor" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability without Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC 1 VNG Realisatie scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set Traceability without Transformation&#xA;' Author: Geert Bellekens&#xA;' Purpose: Set traceability between elements, attributes and associations, but without the metamodel transformation&#xA;' Date: 2016-08-05&#xA;&#xA;SetTraceability false"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AAAFD163-89C9-49e8-8BDB-108356BFC563}"/>
			<Column name="ScriptAuthor" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SetTraceabilityMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Changed by: Robert Melskens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2021-11-29&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Set Traceability&quot;&#xA;dim isTransform&#xA;isTransform = false&#xA;const profilename = &quot;VNGR MUG+Grouping NL&quot;&#xA;&#xA;&#xA;sub SetTraceability(withTransformation)&#xA;&#xA;	Repository.CreateOutputTab outputTabName&#xA;	Repository.ClearOutput outputTabName&#xA;	Repository.EnsureOutputVisible outputTabName&#xA;	Repository.EnableUIUpdates = false&#xA;	&#xA;	isTransform = withTransformation&#xA;	dim copyPackage as EA.Package&#xA;	dim originalPackage as EA.Package&#xA;	'the copy packag is the one selected in the project browser&#xA;	set copyPackage = Repository.GetTreeSelectedPackage&#xA;	msgbox &quot;Please select the original package&quot;&#xA;	'the original package is the one selected by the user&#xA;	dim originalPackageID&#xA;	dim originalPackageElementID&#xA;	originalPackageElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package;Selection=&quot; &amp; copyPackage.PackageGUID)&#xA;	if originalPackageElementID &gt; 0 then&#xA;		dim originalPackageElement as EA.Element&#xA;		set originalPackageElement = Repository.GetElementByID(originalPackageElementID)&#xA;		set originalPackage = Repository.GetPackageByGuid(originalPackageElement.ElementGUID)&#xA;		'tell the user we are starting&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Starting adding traces&quot;,0&#xA;		'start the trace		&#xA;		tracePackageElements originalPackage, copyPackage&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Finished adding traces&quot;,0&#xA;	end if&#xA;	Repository.EnableUIUpdates = true&#xA;	Repository.RefreshModelView copyPackage.PackageID&#xA;end sub&#xA;&#xA;function tracePackageElements(originalPackage, copyPackage)&#xA;	dim originalElement as EA.Element&#xA;	dim copyElement as EA.Element&#xA;	'find corresponding element&#xA;	for each originalElement in originalPackage.Elements&#xA;		'only process elements that have a name&#xA;		if len(originalElement.Name) &gt; 0 then&#xA;			'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			dim matchFound&#xA;			matchFound = false&#xA;			for each copyElement in copyPackage.Elements&#xA;				if copyElement.Name = originalElement.Name then&#xA;					'found a match&#xA;					traceElements originalElement,copyElement&#xA;					if isTransform then&#xA;						transformElement originalElement,copyElement&#xA;					end if&#xA;					matchFound = true&#xA;					exit for&#xA;				end if&#xA;			next&#xA;			if matchFound then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Match found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			else&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Match NOT found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			end if&#xA;		end if&#xA;	next&#xA;	'process subpackages&#xA;	dim originalSubPackage&#xA;	dim copySubpackage&#xA;	for each originalSubPackage in originalPackage.Packages&#xA;		for each copySubpackage in copyPackage.Packages&#xA;			if originalSubPackage.Name = copySubpackage.Name then&#xA;				'found a match&#xA;				tracePackageElements originalSubPackage, copySubpackage&#xA;				exit for&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function traceElements (originalElement,copyElement)&#xA;	dim idx&#xA;'	dim originalElement as EA.Element&#xA;'	dim copyElement as EA.Element&#xA;	'add trace relation&#xA;	dim trace as EA.Connector&#xA;	dim connector as EA.Connector&#xA;&#xA;	'delete the original traces if they exist&#xA;	dim keepDeleting&#xA;	keepDeleting = true&#xA;	do&#xA;		 keepDeleting = deleteOriginalTraces(originalElement,copyElement)&#xA;	loop while keepDeleting&#xA;	&#xA;	dim traceExists&#xA;	traceExists = false&#xA;	'check if the connector exists already&#xA;	for each connector in copyElement.Connectors&#xA;		if connector.SupplierID = originalElement.ElementID _&#xA;		AND connector.Type = &quot;Abstraction&quot; _&#xA;		AND connector.Stereotype = &quot;trace&quot; then&#xA;			traceExists = true&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'if it doesn't exist yet we create a new one&#xA;	if traceExists = false then&#xA;&#xA;		for each connector in copyElement.Connectors&#xA;			if connector.Type = &quot;Abstraction&quot; _&#xA;			AND connector.Stereotype = &quot;trace&quot; then&#xA;				&#xA;				connector.Delete()&#xA;				connector.Type = &quot;&quot;&#xA;				'connector.SupplierID = &quot;&quot;				&#xA;				'exit for&#xA;			end if&#xA;		next&#xA;&#xA;&#xA;		set trace = copyElement.Connectors.AddNew(&quot;&quot;,&quot;Abstraction&quot;)&#xA;		trace.SupplierID = originalElement.ElementID&#xA;		trace.Stereotype = &quot;trace&quot;&#xA;		trace.Update&#xA;	end if&#xA;	'trace attributes&#xA;	traceAttributes originalElement,copyElement&#xA;	'trace associations&#xA;	traceAssociations originalElement,copyElement&#xA;end function&#xA;&#xA;function traceAttributes(originalElement,copyElement)&#xA;	dim originalAttribute as EA.Attribute&#xA;	dim copyAttribute as EA.Attribute&#xA;	for each originalAttribute in originalElement.Attributes&#xA;		for each copyAttribute in copyElement.Attributes&#xA;			if copyAttribute.Name = originalAttribute.Name then&#xA;				if isTransform then&#xA;					transformAttribute originalAttribute,originalElement, copyAttribute &#xA;				end if&#xA;				'found match, add trace tag&#xA;				dim traceTag as EA.AttributeTag&#xA;				set traceTag = getExistingOrNewTaggedValue(copyAttribute,&quot;SourceAttribute&quot;)&#xA;				traceTag.Value = originalAttribute.AttributeGUID&#xA;				traceTag.Update&#xA;				exit for&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function traceAssociations (originalElement,copyElement)&#xA;	dim originalConnector as EA.Connector&#xA;	dim copyConnector as EA.Connector&#xA;	for each originalConnector in originalElement.Connectors&#xA;		'we process only associations that start from the original element&#xA;		if (originalConnector.Type = &quot;Association&quot; or originalConnector.Type = &quot;Aggregation&quot;) _&#xA;			AND originalConnector.ClientID =  originalElement.ElementID then&#xA;			for each copyConnector in copyElement.Connectors&#xA;				if copyConnector.Type = originalConnector.Type _&#xA;					AND copyConnector.Name = originalConnector.Name _&#xA;					AND copyConnector.ClientEnd.Cardinality = originalConnector.ClientEnd.Cardinality _&#xA;					AND copyConnector.ClientEnd.Role = originalConnector.ClientEnd.Role _&#xA;					AND copyConnector.ClientEnd.Aggregation = originalConnector.ClientEnd.Aggregation _&#xA;					AND copyConnector.SupplierEnd.Cardinality = originalConnector.SupplierEnd.Cardinality _&#xA;					AND copyConnector.SupplierEnd.Role = originalConnector.SupplierEnd.Role _&#xA;					AND copyConnector.SupplierEnd.Aggregation = originalConnector.SupplierEnd.Aggregation then&#xA;					'connector properties match, now check the other ends&#xA;					dim originalOtherEnd as EA.Element&#xA;					dim copyOtherEnd as EA.Element&#xA;					set originalOtherEnd = Repository.GetElementByID(originalConnector.SupplierID)&#xA;					set copyOtherEnd = Repository.GetElementByID(copyConnector.SupplierID)&#xA;					if copyOtherEnd.Name = originalOtherEnd.Name _&#xA;						or isTransformedFrom(originalOtherEnd, copyOtherEnd) then&#xA;						'associations with stereotype 'tekentechnisch' need to be removed&#xA;						if isTransform AND copyConnector.Stereotype = &quot;Tekentechnisch&quot; then&#xA;							deleteConnector copyElement, copyConnector&#xA;							copyElement.Connectors.Refresh&#xA;						else&#xA;							'transform&#xA;							if isTransform then&#xA;								transformAssociations originalConnector,copyConnector&#xA;							end if&#xA;							'found a match, add trace tag&#xA;							dim traceTag as EA.ConnectorTag&#xA;							set traceTag = getExistingOrNewTaggedValue(copyConnector,&quot;SourceAssociation&quot;)&#xA;							traceTag.Value = originalConnector.ConnectorGUID&#xA;							traceTag.Update&#xA;						end if&#xA;						exit for&#xA;					end if&#xA;				end if&#xA;			next&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function deleteConnector (owner, connector)&#xA;	dim currentConnector as EA.Connector&#xA;	dim i&#xA;	for i = 0 to owner.Connectors.Count -1&#xA;		set currentConnector = owner.Connectors.GetAt(i)&#xA;		if currentConnector.ConnectorID = connector.ConnectorID then&#xA;			owner.Connectors.DeleteAt i,false&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;' the copyElement is transformed from the originalElement if it has a trace relationship to the originalElement&#xA;function isTransformedFrom(originalElement, copyElement)&#xA;	dim connector as EA.Connector&#xA;	isTransformedFrom = false&#xA;	for each connector in copyElement.Connectors&#xA;		if connector.Stereotype = &quot;trace&quot; and connector.SupplierID = originalElement.ElementID then&#xA;			isTransformedFrom = true&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = nothing&#xA;	'check if a tag with that name alrady exists&#xA;	for each taggedValue in owner.TaggedValues&#xA;		if taggedValue.Name = tagName then&#xA;			set returnTag = taggedValue&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'create new one if not found&#xA;	if returnTag is nothing then&#xA;		set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;	end if&#xA;	'return&#xA;	set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function transformElement(originalElement,copyElement)&#xA;	'set stereotype&#xA;	select case originalElement.Stereotype&#xA;		case &quot;Objecttype_proxy&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Entiteittype&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Objecttype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Entiteittype&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;'			copyElement.Name = originalElement.Alias&#xA;'			copyElement.Alias = getCamelCase(originalElement.Name)&#xA;		case &quot;Gegevensgroeptype_proxy&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Groep&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Gegevensgroeptype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Groep&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Referentielijst&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Tabel-entiteit&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;'			copyElement.Name = originalElement.Alias&#xA;'			copyElement.Alias = getCamelCase(originalElement.Name)&#xA;		case &quot;Relatieklasse&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Relatie-entiteit&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Complex datatype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Complex datatype&quot;&#xA;		case &quot;Gestructureerd datatype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Complex datatype&quot;&#xA;'		case &quot;Union&quot;&#xA;'			copyElement.StereotypeEx = &quot;MUG Union&quot;&#xA;	end select&#xA;	'remove notes for all elements&#xA;'	copyElement.Notes = &quot;&quot; 'not yet&#xA;	copyElement.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalElement.Notes&#xA;	copyElement.Update&#xA;	'copy tagged values&#xA;	copyTaggedValueValues originalElement, copyElement&#xA;end function&#xA;&#xA;function transformAttribute(originalAttribute,originalElement, copyAttribute)&#xA;	'set stereotype&#xA;	select case originalAttribute.Stereotype&#xA;		case &quot;Attribuutsoort_proxy&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Element&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Attribuutsoort&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Element&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Gegevensgroep_proxy&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Gegevensgroep&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Referentie element&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Tabel element&quot;&#xA;			'copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;'		case &quot;Union element&quot;&#xA;'			copyAttribute.StereotypeEx = &quot;MUG Union Element&quot;&#xA;		case &quot;Data element&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Data element&quot;&#xA;	end select&#xA;	&#xA;	'not for enum values. Enum Values have a parent of type enumeration and have not &quot;IsLiteral=0&quot; in the styleEx field&#xA;	if NOT (originalElement.Type = &quot;Enumeration&quot; and not instr(originalAttribute.StyleEx, &quot;IsLiteral=0;&quot;) &gt; 0) then&#xA;		'name =&gt; camelCase&#xA;		copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;	end if&#xA;	'notes&#xA;	copyAttribute.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalAttribute.Notes&#xA;	copyAttribute.Update&#xA;	'cop tagged values&#xA;	copyTaggedValueValues originalAttribute, copyAttribute&#xA;	'kerngegeven stereotype&#xA;'	if isKernGegeven(originalAttribute) then&#xA;'		copyAttribute.StereotypeEx = copyAttribute.StereotypeEx  &amp; &quot;,Kerngegeven&quot;&#xA;'	end if&#xA;end function&#xA;&#xA;function isKernGegeven(attribute)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	isKernGegeven = false&#xA;	for each taggedValue in attribute.TaggedValues&#xA;		if taggedValue.Name = &quot;Indicatie kerngegeven&quot; then&#xA;			if taggedValue.Value = &quot;Ja&quot; then&#xA;				isKernGegeven = true&#xA;			end if&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function transformAssociations (originalConnector,copyConnector)&#xA;	'set stereotype&#xA;	select case originalConnector.Stereotype&#xA;		case &quot;Relatiesoort&quot;&#xA;			copyConnector.StereotypeEx = profilename &amp; &quot;::Relatie&quot;&#xA;		case &quot;Relatieklasse&quot;&#xA;			copyConnector.StereotypeEx = profilename &amp; &quot;::Relatie-entiteit&quot;&#xA;	end select&#xA;	'name =&gt; camelCase&#xA;	copyConnector.Name = getCamelCase(originalConnector.Name)&#xA;	'notes&#xA;	copyConnector.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalConnector.Notes&#xA;	copyConnector.Update&#xA;	'cop tagged values&#xA;	copyTaggedValueValues originalConnector,copyConnector&#xA;end function&#xA;&#xA;function getCamelCase(nameToConvert)&#xA;	  Dim arr, i&#xA;	  arr = Split(nameToConvert, &quot; &quot;)&#xA;	  For i = LBound(arr) To UBound(arr)&#xA;		if i = 0 then&#xA;			arr(i) = LCase(arr(i))&#xA;		else&#xA;			arr(i) = UCase(Left(arr(i), 1)) &amp; LCase(Mid(arr(i), 2))&#xA;		end if&#xA;	  Next&#xA;  getCamelCase = Join(arr, &quot;&quot;)&#xA;end function&#xA;&#xA;function copyTaggedValueValues(originalElement, copyElement)&#xA;	dim copyTV as EA.TaggedValue&#xA;	dim originalTV as EA.TaggedValue&#xA;	for each copyTV in copyElement.TaggedValues&#xA;		for each originalTV in originalElement.TaggedValues&#xA;			if copyTV.Name = originalTV.Name then&#xA;				if copyTV.Name = &quot;Lengte&quot; AND InStr(originalTV.Value,&quot;..&quot;)&gt;0 then&#xA;					dim lengthOfLength&#xA;					lengthOfLength = Len(originalTV.Value)&#xA;					dim lengthOfMinLength&#xA;					lengthOfMinLength = InStr(originalTV.Value,&quot;..&quot;) - 1&#xA;					dim minLengthTV&#xA;					minLengthTV = Left(originalTV.Value,lengthOfMinLength)&#xA;					addAttributeTaggedvalue copyElement, &quot;Minimum lengte&quot;, minLengthTV&#xA;					&#xA;					dim lengthOfMaxLength&#xA;					lengthOfMaxLength = lengthOfLength - lengthOfMinLength - 2&#xA;					dim maxLengthTV&#xA;					maxLengthTV = Right(originalTV.Value,lengthOfMaxLength)&#xA;					copyTV.Value = maxLengthTV&#xA;					copyTV.Notes = originalTV.Notes&#xA;					copyTV.Update&#xA;					exit for&#xA;				else&#xA;					copyTV.Value = originalTV.Value&#xA;					copyTV.Notes = originalTV.Notes&#xA;					copyTV.Update&#xA;					exit for&#xA;				end if&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function addAttributeTaggedvalue(element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	elementTaggedValue.Value = tagValue&#xA;	elementTaggedValue.Update&#xA;end function&#xA;&#xA;function removeTaggedValuesExcept(item, tvsToKeep)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim i&#xA;	for i = item.TaggedValues.Count -1 to 0 step -1&#xA;		set taggedValue = item.TaggedValues(i)&#xA;		if not tvsToKeep.contains(taggedValue.Name) then&#xA;			item.TaggedValues.DeleteAt i, false&#xA;		end if	&#xA;	next&#xA;end function&#xA;&#xA;function deleteOriginalTraces(originalElement,copyElement)&#xA;	dim i&#xA;	dim copyConnector as EA.Connector&#xA;	deleteOriginalTraces = false&#xA;	'make sure the connectors are refreshed&#xA;	copyElement.Connectors.Refresh&#xA;	originalElement.Connectors.Refresh&#xA;	'remove all the traces to domain model classes&#xA;	for each copyConnector in copyElement.Connectors&#xA;		if copyConnector.Type = &quot;Abstraction&quot; AND copyConnector.Stereotype = &quot;trace&quot; then&#xA;			'check if the original element has the same trace&#xA;			dim originalConnector as EA.Connector&#xA;			for each originalConnector in originalElement.Connectors&#xA;				if copyConnector.Type = &quot;Abstraction&quot; AND _&#xA;				copyConnector.Stereotype = &quot;trace&quot; AND _&#xA;				copyConnector.SupplierID = originalConnector.SupplierID then&#xA;					deleteConnector copyElement, copyConnector&#xA;					'refresh again and exit function&#xA;					copyElement.Connectors.Refresh&#xA;					originalElement.Connectors.Refresh&#xA;					'found on, try again&#xA;					deleteOriginalTraces = true&#xA;					exit function&#xA;				end if&#xA;			next&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function deleteConnector (owner, connector)&#xA;	dim currentConnector as EA.Connector&#xA;	dim i&#xA;	for i = 0 to owner.Connectors.Count -1&#xA;		set currentConnector = owner.Connectors.GetAt(i)&#xA;		if currentConnector.ConnectorID = connector.ConnectorID then&#xA;			owner.Connectors.DeleteAt i,false&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="6"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;CONTEXTPACKAGE&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Package Group"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="7"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{AC9C49BF-D3C6-4eb0-889C-3C36C12E77E7}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="DiagramGroup"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F4EFEA60-4E27-430f-A9CB-7F42EFA2E0E2}"/>
			<Column name="ScriptAuthor" value="{AC9C49BF-D3C6-4eb0-889C-3C36C12E77E7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set composition source and target&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set composition source and target&#xA;' Author: Geert Bellekens&#xA;' Purpose: Make sure that the whole end is always the source, and the part end is always the target&#xA;' Date: 18/11/2015&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;	' Get a reference to the current diagram&#xA;	dim currentDiagram as EA.Diagram&#xA;	set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;	if not currentDiagram is nothing then&#xA;		'first save the diagram&#xA;		Repository.SaveDiagram currentDiagram.DiagramID&#xA;		' Get a reference to any selected connector/objects&#xA;		dim selectedConnector as EA.Connector&#xA;		set selectedConnector = currentDiagram.SelectedConnector&#xA;&#xA;		if not selectedConnector is nothing then&#xA;			'correct the composition direction for a single composition&#xA;			correctCompositionDirection selectedConnector&#xA;			'reload diagram to show changes&#xA;			Repository.ReloadDiagram currentDiagram.DiagramID&#xA;		else&#xA;			'correct the composition direction for all compositions in the diagram&#xA;			dim diagramLink as EA.DiagramLink&#xA;			for each diagramLink in currentDiagram.DiagramLinks&#xA;				'get connector from diagram link&#xA;				dim connector as EA.Connector&#xA;				set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;				'set composition source and target&#xA;				correctCompositionDirection connector&#xA;			next&#xA;			'reload diagram to show changes&#xA;			Repository.ReloadDiagram currentDiagram.DiagramID&#xA;		end if&#xA;	else&#xA;		Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;	end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;function correctCompositionDirection(relation)&#xA;	if relation.Type = &quot;Association&quot; or _&#xA;		relation.Type = &quot;Aggregation&quot; then&#xA;		'check aggregationKind&#xA;		if relation.SupplierEnd.Aggregation &lt;&gt; 0 _&#xA;			and relation.ClientEnd.Aggregation = 0 then&#xA;			'switch source and target&#xA;			'switch ID's&#xA;			dim tempID&#xA;			tempID = relation.ClientID&#xA;			relation.ClientID = relation.SupplierID&#xA;			relation.SupplierID = tempID&#xA;			'switch Ends&#xA;			switchRelationEnds relation&#xA;			'save relation&#xA;			relation.Update&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function switchRelationEnds (relation)&#xA;	dim tempVar&#xA;	tempvar = relation.ClientEnd.Aggregation&#xA;	relation.ClientEnd.Aggregation = relation.SupplierEnd.Aggregation&#xA;	relation.SupplierEnd.Aggregation       = tempvar&#xA;	tempvar = relation.ClientEnd.Alias&#xA;	relation.ClientEnd.Alias = relation.SupplierEnd.Alias&#xA;	relation.SupplierEnd.Alias             = tempvar&#xA;	tempvar = relation.ClientEnd.AllowDuplicates&#xA;	relation.ClientEnd.AllowDuplicates = relation.SupplierEnd.AllowDuplicates&#xA;	relation.SupplierEnd.AllowDuplicates   = tempvar&#xA;	tempvar = relation.ClientEnd.Cardinality&#xA;	relation.ClientEnd.Cardinality = relation.SupplierEnd.Cardinality&#xA;	relation.SupplierEnd.Cardinality       = tempvar&#xA;	tempvar = relation.ClientEnd.Constraint&#xA;	relation.ClientEnd.Constraint = relation.SupplierEnd.Constraint&#xA;	relation.SupplierEnd.Constraint        = tempvar&#xA;	tempvar = relation.ClientEnd.Containment&#xA;	relation.ClientEnd.Containment = relation.SupplierEnd.Containment&#xA;	relation.SupplierEnd.Containment       = tempvar&#xA;	tempvar = relation.ClientEnd.Derived&#xA;	relation.ClientEnd.Derived = relation.SupplierEnd.Derived&#xA;	relation.SupplierEnd.Derived           = tempvar&#xA;	tempvar = relation.ClientEnd.DerivedUnion&#xA;	relation.ClientEnd.DerivedUnion = relation.SupplierEnd.DerivedUnion&#xA;	relation.SupplierEnd.DerivedUnion      = tempvar&#xA;	tempvar = relation.ClientEnd.IsChangeable&#xA;	relation.ClientEnd.IsChangeable = relation.SupplierEnd.IsChangeable&#xA;	relation.SupplierEnd.IsChangeable      = tempvar&#xA;	tempvar = relation.ClientEnd.IsNavigable&#xA;	relation.ClientEnd.IsNavigable = relation.SupplierEnd.IsNavigable&#xA;	relation.SupplierEnd.IsNavigable       = tempvar&#xA;	tempvar = relation.ClientEnd.Navigable&#xA;	relation.ClientEnd.Navigable = relation.SupplierEnd.Navigable&#xA;	relation.SupplierEnd.Navigable         = tempvar&#xA;	tempvar = relation.ClientEnd.Ordering&#xA;	relation.ClientEnd.Ordering = relation.SupplierEnd.Ordering&#xA;	relation.SupplierEnd.Ordering          = tempvar&#xA;	tempvar = relation.ClientEnd.OwnedByClassifier&#xA;	relation.ClientEnd.OwnedByClassifier = relation.SupplierEnd.OwnedByClassifier&#xA;	relation.SupplierEnd.OwnedByClassifier = tempvar&#xA;	tempvar = relation.ClientEnd.Qualifier&#xA;	relation.ClientEnd.Qualifier = relation.SupplierEnd.Qualifier&#xA;	relation.SupplierEnd.Qualifier         = tempvar&#xA;	tempvar = relation.ClientEnd.Role&#xA;	relation.ClientEnd.Role = relation.SupplierEnd.Role&#xA;	relation.SupplierEnd.Role              = tempvar&#xA;	tempvar = relation.ClientEnd.RoleNote&#xA;	relation.ClientEnd.RoleNote = relation.SupplierEnd.RoleNote&#xA;	relation.SupplierEnd.RoleNote          = tempvar&#xA;	tempvar = relation.ClientEnd.RoleType&#xA;	relation.ClientEnd.RoleType = relation.SupplierEnd.RoleType&#xA;	relation.SupplierEnd.RoleType          = tempvar&#xA;	tempvar = relation.ClientEnd.Stereotype&#xA;	relation.ClientEnd.Stereotype = relation.SupplierEnd.Stereotype&#xA;	relation.SupplierEnd.Stereotype        = tempvar&#xA;	tempvar = relation.ClientEnd.StereotypeEx&#xA;	relation.ClientEnd.StereotypeEx = relation.SupplierEnd.StereotypeEx&#xA;	relation.SupplierEnd.StereotypeEx      = tempvar&#xA;'	tempvar = relation.ClientEnd.TaggedValues&#xA;'	relation.ClientEnd.TaggedValues = relation.SupplierEnd.TaggedValues&#xA;'	relation.SupplierEnd.TaggedValues      = tempvar&#xA;	tempvar = relation.ClientEnd.Visibility&#xA;	relation.ClientEnd.Visibility = relation.SupplierEnd.Visibility&#xA;	relation.SupplierEnd.Visibility        = tempvar&#xA;	relation.ClientEnd.Update&#xA;	relation.SupplierEnd.Update&#xA;end function&#xA;&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C11883D5-0119-4b3b-AFBE-9005028D3DC7}"/>
			<Column name="ScriptAuthor" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Convert MIG metamodel&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Projects\Project K\1 VNG Realisatie Scripts]&#xA;'[group=1 VNG Realisatie Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Converting MIG metamodel&#xA;' Author: Geert Bellekens&#xA;' Changed by: Robert Melskens&#xA;' Purpose: Convert the elements of a given package according to the changes in the metamodel for MIG to the metamodel for MIM.&#xA;' Date: 2021-02-12&#xA;'&#xA;&#xA;const outputTabName = &quot;Convert to MIM 1.1&quot;&#xA;const datatypePackageGUID = &quot;{A76425DB-C2F6-443f-8C73-33356AFEB13E}&quot;&#xA;const profilename = &quot;VNGR SIM+Grouping NL&quot;&#xA;&#xA;&#xA;dim datatypesDictionary&#xA;dim dataTypetranslations&#xA;&#xA;sub main&#xA;	'create the output tab&#xA;	Repository.CreateOutputTab outputTabName&#xA;	Repository.ClearOutput outputTabName&#xA;	Repository.EnsureOutputVisible outputTabName&#xA;	'start with selected package&#xA;	dim selectedPackage as EA.Package&#xA;	set selectedPackage = Repository.GetTreeSelectedPackage&#xA;	if not selectedPackage is nothing then&#xA;		select case lcase(selectedPackage.StereotypeEx) = &quot;basismodel&quot; OR lcase(selectedPackage.StereotypeEx) = &quot;mim::basismodel&quot;&#xA;			case true&#xA;			  'tell the user we are starting&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Starting conversion to MIM 1.1&quot;,0&#xA;			  'correct package stereotype&#xA;			  dim newStereotype&#xA;			  newStereotype = profilename &amp; &quot;::Basismodel&quot;&#xA;			  selectedPackage.StereotypeEx = newStereotype&#xA;			  'do the actual work&#xA;			  convertPackage selectedPackage&#xA;			  'tell the user we are finished&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Finished conversion to MIM 1.1&quot;,0&#xA;			case false&#xA;			  msgbox &quot;Please select a 'basismodel' package in the project browser before starting this script&quot;&#xA;		end select&#xA;	else&#xA;	  msgbox &quot;Please select a 'basismodel' package in the project browser before starting this script&quot;&#xA;	end if&#xA;end sub&#xA;&#xA;function convertPackage(selectedPackage)&#xA;	dim newStereotype&#xA;	'inform the user of the progress&#xA; 	Repository.WriteOutput outputTabName, now() &amp; &quot; Processing package '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;	select case lcase(selectedPackage.StereotypeEx)&#xA;		case &quot;domein&quot;&#xA;			newStereotype = profilename &amp; &quot;::Domein&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;intern&quot;&#xA;			newStereotype = profilename &amp; &quot;::Intern&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;prullenbak&quot;&#xA;			newStereotype = profilename &amp; &quot;::Prullenbak&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;	end select&#xA;&#xA;&#xA;	'Add standard taggedvalues to the package relevant for the stereotype.&#xA;	addPackageTaggedvalues selectedPackage&#xA;&#xA;	dim element as EA.Element&#xA;	for each element in selectedPackage.Elements&#xA;		convertElement element&#xA;	next&#xA;	selectedPackage.Update()&#xA;	'loop subPackages&#xA;	dim subPackage as EA.Package&#xA;	for each subPackage in selectedPackage.Packages&#xA;		convertPackage subPackage&#xA;	next&#xA;end function&#xA;&#xA;function convertElement(element)&#xA;	'inform the user of the progress&#xA;	'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing element '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;	dim attribute as EA.Attribute&#xA;	dim newStereotype&#xA;	dim oldStereotype&#xA;	dim relation as EA.Connector&#xA;	dim i&#xA;	dim subElement as EA.Element&#xA;	if lcase(element.Stereotype) = &quot;complex datatype&quot; _&#xA;	    OR lcase(element.Stereotype) = &quot;mim::complex datatype&quot; then&#xA;		'convert taggedvalues&#xA;		convertElementTaggedvalue element&#xA;		'make sure we have all attributes&#xA;		element.Attributes.Refresh&#xA;		'loop all attributes&#xA;		for each attribute in element.Attributes&#xA;			convertAttribute attribute, element&#xA;		next&#xA;		'actually change the stereotype&#xA;		newStereotype = profilename &amp; &quot;::Gestructureerd datatype&quot;&#xA;		element.StereotypeEx = newStereotype&#xA;		element.Update()&#xA;	else&#xA;		if lcase(element.Stereotype) = &quot;referentielijst&quot; _&#xA;			OR lcase(element.Stereotype) = &quot;mim::referentielijst&quot; then&#xA;			element.Type = &quot;DataType&quot;&#xA;			element.Update()&#xA;			'convert taggedvalues&#xA;			convertElementTaggedvalue element&#xA;			'loop all relations (backwards because we need to delete them)&#xA;			for i = element.Connectors.Count -1 to 0 step -1&#xA;				set relation = element.Connectors.GetAt(i)&#xA;				convertRelation relation, element, i&#xA;			next&#xA;			'make sure we have all attributes&#xA;			element.Attributes.Refresh&#xA;			'loop all attributes&#xA;			for each attribute in element.Attributes&#xA;				convertAttribute attribute, element&#xA;			next&#xA;			'loop subElements&#xA;			for each subElement in element.Elements&#xA;				convertElement subElement&#xA;			next&#xA;			'actually change the stereotype&#xA;			oldStereotype = element.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			element.StereotypeEx = newStereotype&#xA;			element.Update()&#xA;		else&#xA;			if lcase(element.Type) = &quot;enumeration&quot; then&#xA;				'make sure we have all attributes&#xA;				element.Attributes.Refresh&#xA;				'loop all attributes&#xA;'				for each attribute in element.Attributes&#xA;'					convertAttribute attribute, element&#xA;'				next&#xA;				'actually change the stereotype&#xA;				newStereotype = profilename &amp; &quot;::Enumeratie&quot;&#xA;				element.StereotypeEx = newStereotype&#xA;				element.Update()&#xA;			else&#xA;				'convert taggedvalues&#xA;				convertElementTaggedvalue element&#xA;				'loop all relations (backwards because we need to delete them)&#xA;				for i = element.Connectors.Count -1 to 0 step -1&#xA;					set relation = element.Connectors.GetAt(i)&#xA;					convertRelation relation, element, i&#xA;				next&#xA;				'make sure we have all attributes&#xA;				element.Attributes.Refresh&#xA;				'loop all attributes&#xA;				for each attribute in element.Attributes&#xA;					convertAttribute attribute, element&#xA;				next&#xA;				'loop subElements&#xA;				for each subElement in element.Elements&#xA;					convertElement subElement&#xA;				next&#xA;				'actually change the stereotype&#xA;				oldStereotype = element.Stereotype&#xA;				newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;				element.StereotypeEx = newStereotype&#xA;				element.Update()&#xA;			end if&#xA;		end if&#xA;	end if&#xA;	if lcase(element.Stereotype) &lt;&gt; &quot;mim::gegevensgroeptype&quot; _&#xA;	  AND lcase(element.Stereotype) &lt;&gt; &quot;gegevensgroeptype&quot; _&#xA;	  AND lcase(element.Stereotype) &lt;&gt; &quot;mim::gegevensgroeptype_proxy&quot; _&#xA;	  AND lcase(element.Stereotype) &lt;&gt; &quot;gegevensgroeptype_proxy&quot; then&#xA;		'remove taggedvalues&#xA;		removeElementTaggedvalue element&#xA;	end if&#xA;	element.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;function convertAttribute(attribute, element)&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	if lcase(element.Type) = &quot;enumeration&quot; then&#xA;		newStereotype = profilename &amp; &quot;::Enumeratiewaarde&quot;&#xA;		attribute.Stereotype = newStereotype&#xA;	else&#xA;		'convert datatype&#xA;		convertDatatype attribute, element&#xA;		'convert taggedvalues&#xA;		convertAttributeTaggedvalue attribute, element&#xA;		'move constraints&#xA;		convertRegelsToConstraint attribute, element&#xA;		'remove taggedvalues&#xA;		removeAttributeTaggedvalue attribute, element&#xA;		oldStereotype = attribute.Stereotype&#xA;		newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;		attribute.StereotypeEx = newStereotype&#xA;	end if&#xA;	'actually change the stereotype&#xA;	attribute.Update()&#xA;end function&#xA;&#xA;function convertDatatype(attribute, element)&#xA;    'only if not already linked to an element&#xA;	'and not for enumeration literals&#xA;	'and not for proxy attribuutsooorten&#xA;	if attribute.ClassifierID &gt; 0 _ &#xA;		OR instr(attribute.StyleEx, &quot;IsLiteral=1&quot;) &gt; 0 _ &#xA;		OR lcase(attribute.Stereotype) = &quot;mim::attribuutsoort_proxy&quot; _ &#xA;		OR lcase(attribute.Stereotype) = &quot;attribuutsoort_proxy&quot; then  &#xA;		exit function&#xA;	end if&#xA;	'If no datatype has been provided a message is generated and this function is abandoned.&#xA;	'Probabbly it concerns an enumeration value.&#xA;	if attribute.Type =  &quot;&quot; then&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; WARNING: On attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' no type has been defined (perhaps deliberately).&quot;, element.ElementID&#xA;		exit function&#xA;	end if&#xA;	'get the datatype&#xA;	dim datatypeString &#xA;	datatypeString = attribute.Type&#xA;	'create the datatypeTranslations if needed&#xA;	fillDatatypeTranslations&#xA;	'create the global datatype dictionary if needed&#xA;	filldatatypesDictionary&#xA;	'set to UPPERCASE&#xA;	datatypeString = UCase(datatypeString)&#xA;	'get the datatypeParts&#xA;	Dim regExp		&#xA;	Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;	regExp.Global = True   &#xA;	regExp.IgnoreCase = True&#xA;	regExp.Pattern = &quot;([A-Z?]+)([0-9]+)?(?:(?:[,.])([0-9]*))?&quot;&#xA;	dim matches&#xA;	set matches = regExp.Execute(datatypeString)&#xA;	dim match&#xA;	dim typeName&#xA;	typeName = &quot;&quot;&#xA;	dim lengthValue&#xA;	lengthValue = &quot;&quot;&#xA;	for each match in matches&#xA;		dim subMatch&#xA;		if match.SubMatches.Count &gt; 0 then&#xA;			typeName = match.SubMatches(0)&#xA;			if match.SubMatches.Count &gt; 1 then&#xA;				lengthValue = match.SubMatches(1)&#xA;				if len(lengthValue) &gt; 0 AND match.SubMatches.Count &gt; 2 then&#xA;					dim precisionValue&#xA;					precisionValue = match.SubMatches(2)&#xA;					if len(precisionValue) &gt; 0 then&#xA;						lengthValue = lengthValue + &quot;,&quot; + precisionValue&#xA;						'change N into ND in order to map to &quot;Real&quot;&#xA;						if UCase(typeName) = &quot;N&quot; then&#xA;							typeName = &quot;ND&quot;&#xA;						end if&#xA;					end if&#xA;				end if&#xA;			end if&#xA;		end if&#xA;		exit for 'we only need 1&#xA;	next&#xA;	'get the datatype element&#xA;	dim translatedTypeName&#xA;	if dataTypetranslations.Exists(typeName) then&#xA;		translatedTypeName = dataTypetranslations(typeName)&#xA;		'get the actual datatype element&#xA;		if datatypesDictionary.Exists(translatedTypeName) then&#xA;			dim datatype as EA.Element&#xA;			set datatype = datatypesDictionary(translatedTypeName)&#xA;			'inform the user&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Setting datatype for '&quot; &amp; datatypeString &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			'set the datatype on the attribute&#xA;			attribute.ClassifierID = datatype.ElementID&#xA;			attribute.Type = datatype.Name&#xA;			attribute.Update&#xA;			if len(lengthValue) &gt; 0 then&#xA;				'set the lenth value tagged value&#xA;				dim lengthTaggedValue as EA.AttributeTag&#xA;				set lengthTaggedValue = getExistingOrNewTaggedValue(attribute, &quot;Lengte&quot;)&#xA;				lengthTaggedValue.Value = lengthValue&#xA;				lengthTaggedValue.Update&#xA;			end if&#xA;		else&#xA;			'report error&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Datatype '&quot; &amp; typeName &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' can't be translated automatically to '&quot; &amp; translatedTypeName &amp; &quot;'. Solve this manually.&quot;, element.ElementID&#xA;		end if&#xA;	else&#xA;		'report error&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Invalid datatype on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;	end if&#xA;end function&#xA;&#xA;function getLowerBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getLowerBound = &quot;1&quot;&#xA;	else&#xA;		if cardinality = &quot;*&quot; then&#xA;			getLowerBound = &quot;0&quot;&#xA;		else&#xA;			dim parts&#xA;			parts = Split(cardinality,&quot;..&quot;)&#xA;			getLowerBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function getUpperBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getUpperBound = &quot;1&quot;&#xA;	else&#xA;		dim parts&#xA;		parts = Split(cardinality,&quot;..&quot;)&#xA;		if Ubound(parts) &gt;= 1 then&#xA;			getUpperBound = parts(1)&#xA;		else&#xA;			getUpperBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function addPackageTaggedvalues(package)&#xA;	if lcase(package.Element.Stereotype) = &quot;basismodel&quot; _&#xA;	    OR lcase(package.Element.Stereotype) = &quot;mim::basismodel&quot; then&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Domein' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Domein&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Informatiemodel type' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Informatiemodel type&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Relatiemodelleringstype' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Relatiemodelleringstype&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM versie' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM versie&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM extensie' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM extensie&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM taal' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM taal&quot;, &quot;&quot;&#xA;	end if&#xA;	package.Element.Refresh()&#xA;end function&#xA;&#xA;function convertRelation(relation, element,i)&#xA;	'convert taggedvalues&#xA;	convertRelationTaggedvalue relation, element&#xA;	'get the target element&#xA;	'move �gegevensgroep compositie� relation to attribute using the gegevensgrouptype as type&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	if (lcase(relation.Stereotype) = &quot;mim::gegevensgroep compositie&quot; _&#xA;	   OR lcase(relation.Stereotype) = &quot;gegevensgroep compositie&quot; ) _&#xA;	   AND relation.ClientID = element.ElementID then&#xA;		dim targetElement as EA.Element&#xA;		set targetElement = Repository.GetElementByID(relation.SupplierID)&#xA;		'inform the user of the progress&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Processing relation to '&quot; &amp; targetElement.Name &amp; &quot;'&quot;, element.ElementID&#xA;		newStereotype = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;		if lcase(targetElement.Stereotype) = &quot;mim::gegevensgroeptype_proxy&quot; _&#xA;		    OR lcase(targetElement.Stereotype) = &quot;gegevensgroeptype_proxy&quot;then&#xA;			newStereotype =  newStereotype &amp; &quot;_proxy&quot;&#xA;		end if&#xA;		'create new attribute on the element&#xA;		dim attribute as EA.Attribute&#xA;		set attribute = element.Attributes.AddNew(targetElement.Name, targetElement.Name)&#xA;		attribute.ClassifierID = targetElement.ElementID&#xA;		attribute.Notes = targetElement.Notes&#xA;		attribute.LowerBound = getLowerBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.UpperBound = getUpperBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.Update()&#xA;		'remove the notes from the target element&#xA;		targetElement.Notes = &quot;&quot;&#xA;		targetElement.Update&#xA;		'move the regels from the target element to the constraints on the new attribute&#xA;		convertRegelsToConstraint targetElement, attribute&#xA;		'check if a SourceAssociation tagged value is present&#xA;		dim idx&#xA;		dim sourceAssociation&#xA;		dim relationTag as EA.TaggedValue&#xA;		for idx = 0 to relation.TaggedValues.Count-1&#xA;			set relationTag = relation.TaggedValues.GetAt(idx)&#xA;			if lcase(relationTag.Name) = &quot;sourceassociation&quot; then&#xA;				sourceAssociation = true&#xA;			end if&#xA;		next&#xA; 		'remove the relation&#xA;		element.Connectors.DeleteAt i, false&#xA;		element.Refresh()		&#xA;		'move also all(?) tagged values from gegevensgroeptype(_proxy) to gegevensgroep(_proxy)&#xA;		dim elementTag as EA.TaggedValue&#xA;		for each elementTag in targetElement.TaggedValues&#xA;			dim attributeTag as EA.AttributeTag&#xA;			dim tagName&#xA;			dim tagValue&#xA;			dim tagNotes&#xA;			if lcase(elementTag.Name) = &quot;indicatie authentiek&quot; then&#xA;				tagName = &quot;Authentiek&quot;&#xA;			else&#xA;				tagName = elementTag.Name&#xA;			end if&#xA;			tagValue  = elementTag.Value&#xA;			'get the corresponding tag on the attribute&#xA;			set attributeTag = getExistingTag(attribute, tagName)&#xA;			if not attributeTag is nothing then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; attributeTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;				'copy value&#xA;				attributeTag.Value = tagValue&#xA;				'copy notes if of type &quot;memo&quot;&#xA;				if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;					attributeTag.Notes = elementTag.Notes&#xA;				end if&#xA;				attributeTag.Update&#xA;			else &#xA;				if tagValue &lt;&gt; &quot;&quot; then&#xA;					'create relevant tagged values on gegevensgroep or gegevensgroep_proxy&#xA;					if newStereotype = profilename &amp; &quot;::Gegevensgroep&quot; then&#xA;						select case tagName&#xA;							case &quot;Herkomst&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Herkomst&quot;, tagValue&#xA;							case &quot;Herkomst definitie&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Herkomst definitie&quot;, tagValue&#xA;							case &quot;Datum opname&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Datum opname&quot;, tagValue&#xA;							case &quot;Indicatie materi�le historie&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Indicatie materi�le historie&quot;, tagValue&#xA;							case &quot;Indicatie formele historie&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Indicatie formele historie&quot;, tagValue&#xA;							case &quot;Indicatie in onderzoek&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Indicatie in onderzoek&quot;, tagValue&#xA;							case &quot;Aanduiding strijdigheid/nietigheid&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Aanduiding strijdigheid/nietigheid&quot;, tagValue&#xA;							case &quot;Authentiek&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Authentiek&quot;, tagValue&#xA;						end select&#xA;					end if&#xA;					if newStereotype = profilename &amp; &quot;::Gegevensgroep_proxy&quot; then&#xA;						select case tagName&#xA;							case &quot;Indicatie kardinaliteit&quot;&#xA;								Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;								addAttributeTaggedvalue attribute, element, &quot;Indicatie kardinaliteit&quot;, tagValue&#xA;						end select&#xA;					end if&#xA;					select case tagName&#xA;						case &quot;Toelichting&quot;&#xA;							Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; tagName &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;							addAttributeTaggedvalue attribute, element, &quot;Toelichting&quot;, tagValue&#xA;					end select&#xA;				end if&#xA;			end if&#xA;		next&#xA;		element.Refresh()		&#xA;		' create the tagged value sourceAttribute if the tagged value sourceAssociation was present on the relation&#xA;		if sourceAssociation = true then&#xA;			dim tags as EA.Collection&#xA;			set tags = attribute.TaggedValues&#xA;			&#xA;			dim newTag as EA.AttributeTag&#xA;			set newTag = tags.AddNew( &quot;SourceAttribute&quot;, &quot;&quot; )&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provide a value for the Tagged Value 'SourceAttribute' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			newTag.Update()&#xA;			tags.Refresh()&#xA;		end if&#xA;		'remove taggedvalues&#xA;		removeElementTaggedvalue targetElement&#xA;		'actually change the stereotype&#xA;		attribute.StereotypeEx = newStereotype&#xA;		attribute.Update()&#xA;	else&#xA;		if lcase(relation.Type) = &quot;abstraction&quot; then&#xA;			'change the stereotype&#xA;			newStereotype = &quot;EAUML::trace&quot;&#xA;			relation.StereotypeEx = newStereotype&#xA;			relation.Update()&#xA;		else&#xA;			'change the stereotype&#xA;			oldStereotype = relation.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			relation.StereotypeEx = newStereotype&#xA;			relation.Update()&#xA;		end if&#xA;	end if&#xA;	'convert taggedvalues for EndConnector&#xA;	dim connectorTarget as EA.ConnectorEnd&#xA;	set connectorTarget = relation.SupplierEnd&#xA;	convertEndConnectorTaggedvalue connectorTarget, relation&#xA;	element.Refresh()&#xA;	relation.TaggedValues.Refresh()&#xA;	'move all &quot;regels&quot; to constraints in the source element&#xA;	convertRegelsToConstraint relation, element&#xA;	'remove all &quot;regels&quot; from connectors&#xA;	removeRelationTaggedvalue relation, element&#xA;end function&#xA;&#xA;function removeTaggedvalue(child, element, idx, tvtype, tag)&#xA;	select case tvtype&#xA;		case &quot;attribute&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;relation&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;element&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;			element.TaggedValues.DeleteAt idx, false&#xA;	end select&#xA;end function&#xA;&#xA;function removeAttributeTaggedvalue(attribute, element)&#xA;	dim idx&#xA;	dim attributeTag &#xA;	select case lcase(attribute.Stereotype)&#xA;		case &quot;attribuutsoort&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;locatie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;code&quot; &#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::attribuutsoort&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;locatie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;code&quot; &#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;attribuutsoort_proxy&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::attribuutsoort_proxy&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;union element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::union element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;referentie element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::referentie element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;data element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::data element&quot;&#xA;			for idx = 0 to attribute.TaggedValues.Count-1&#xA;				set attributeTag = attribute.TaggedValues.GetAt(idx)&#xA;				select case lcase(attributeTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue attribute, element, idx, &quot;attribute&quot;, attributeTag&#xA;				end select&#xA;			next&#xA;	end select	&#xA;end function&#xA;&#xA;function removeRelationTaggedvalue(relation, element)&#xA;	dim idx&#xA;	dim relationTag &#xA;	for idx = 0 to relation.TaggedValues.Count-1&#xA;		set relationTag = relation.TaggedValues.GetAt(idx)&#xA;		if lcase(relationTag.Name) = &quot;regels&quot; then&#xA;			removeTaggedvalue relation, element, idx, &quot;relation&quot;, relationTag&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function removeElementTaggedvalue(element)&#xA;	dim idx&#xA;	dim elementTag &#xA;	select case lcase(element.Stereotype)&#xA;		case &quot;gestructureerd datatype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim:gestructureerd datatype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;referentielijst&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;'					case &quot;data locatie&quot;&#xA;'						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::referentielijst&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;'					case &quot;data locatie&quot;&#xA;'						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;gegevensgroeptype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie materi�le historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie formele historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie in onderzoek&quot; &#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;aanduiding strijdigheid/nietigheid&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie authentiek&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;mogeljk geen waarde&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::gegevensgroeptype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie materi�le historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie formele historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie in onderzoek&quot; &#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;aanduiding strijdigheid/nietigheid&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie authentiek&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;mogeljk geen waarde&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;gegevensgroeptype_proxy&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;toelichting&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie kardinaliteit&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::gegevensgroeptype_proxy&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;toelichting&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie kardinaliteit&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;union&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::union&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst definitie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;objecttype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;		case &quot;mim::objecttype&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;	end select&#xA;end function&#xA;&#xA;function convertAttributeTaggedvalue(attribute, element)&#xA;	'get the taggedvalue&#xA;	dim attributeTag as EA.TaggedValue &#xA;	for each attributeTag in attribute.TaggedValues&#xA;		dim tagName&#xA;		if lcase(attributeTag.Name) = &quot;indicatie authentiek&quot; then&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; attributeTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' to 'Authentiek'&quot;, element.ElementID&#xA;			tagName = &quot;Authentiek&quot;&#xA;		else&#xA;			tagName = attributeTag.Name&#xA;		end if&#xA;		attributeTag.Name = tagName&#xA;		attributeTag.Update&#xA;	next&#xA;end function&#xA;&#xA;function convertRelationTaggedvalue(relation, element)&#xA;	'get the taggedvalue&#xA;	dim relationTag as EA.TaggedValue &#xA;	for each relationTag in relation.TaggedValues&#xA;		dim tagName&#xA;		if lcase(relationTag.Name) = &quot;indicatie authentiek&quot; then&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; relationTag.Name &amp; &quot;' for relation '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; relation.Name &amp; &quot;' to 'Authentiek'&quot;, element.ElementID&#xA;			tagName = &quot;Authentiek&quot;&#xA;		else&#xA;			tagName = relationTag.Name&#xA;		end if&#xA;		relationTag.Name = tagName&#xA;		relationTag.Update&#xA;	next&#xA;end function&#xA;&#xA;function addElementTaggedvalue(element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	Repository.WriteOutput outputTabName, now() &amp; &quot; Taggedvalue value '&quot; &amp; elementTaggedValue.Value, element.ElementID&#xA;	elementTaggedValue.Value = tagValue&#xA;	if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;		attributeTaggedValue.Notes = elementTaggedValue.Notes&#xA;	end if&#xA;	elementTaggedValue.Update&#xA;end function&#xA;&#xA;function addAttributeTaggedvalue(attribute, element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	dim attributeTaggedValue as EA.AttributeTag &#xA;	set attributeTaggedValue = getExistingOrNewTaggedValue(attribute, tagName)&#xA;	attributeTaggedValue.Value = tagValue&#xA;	if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;		attributeTaggedValue.Notes = elementTaggedValue.Notes&#xA;	end if&#xA;	attributeTaggedValue.Update&#xA;end function&#xA;&#xA;function convertEndConnectorTaggedvalue(endconnector, relation)&#xA;	'get the taggedvalue&#xA;	dim endConnectorTag as EA.RoleTag &#xA;	for each endConnectorTag in endconnector.TaggedValues&#xA;		dim tagName&#xA;		if lcase(endConnectorTag.Tag) = &quot;indicatie authentiek&quot; then&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; endConnectorTag.Tag &amp; &quot;' for Connectortarget of '&quot; &amp; relation.Name &amp; &quot;' to 'Authentiek'&quot;, relation.SupplierID&#xA;			tagName = &quot;Authentiek&quot;&#xA;		else&#xA;			tagName = endConnectorTag.Tag&#xA;		end if&#xA;		endConnectorTag.Tag = tagName&#xA;		endConnectorTag.Update&#xA;	next&#xA;end function&#xA;&#xA;function convertElementTaggedvalue(element)&#xA;	dim idx&#xA;	dim elementTag &#xA;	dim tagName&#xA;	select case lcase(element.Stereotype)&#xA;		case &quot;objecttype&quot;&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;kwaliteitsbegrip&quot;&#xA;						Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; elementTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;' to 'Kwaliteit'&quot;, element.ElementID&#xA;						tagName = &quot;Kwaliteit&quot;&#xA;						elementTag.Name = tagName&#xA;						elementTag.Update&#xA;				end select&#xA;			next&#xA;		case &quot;mim::objecttype&quot;&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;kwaliteitsbegrip&quot;&#xA;						Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; elementTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;' to 'Kwaliteit'&quot;, element.ElementID&#xA;						tagName = &quot;Kwaliteit&quot;&#xA;						elementTag.Name = tagName&#xA;						elementTag.Update&#xA;				end select&#xA;			next&#xA;		case &quot;referentielijst&quot;&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;data locatie&quot;&#xA;						Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; elementTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;' to 'Locatie'&quot;, element.ElementID&#xA;						tagName = &quot;Locatie&quot;&#xA;						elementTag.Name = tagName&#xA;						elementTag.Update&#xA;				end select&#xA;			next&#xA;		case &quot;mim::referentielijst&quot;&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;data locatie&quot;&#xA;						Repository.WriteOutput outputTabName, now() &amp; &quot; Converting Tagged Value '&quot; &amp; elementTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;' to 'Locatie'&quot;, element.ElementID&#xA;						tagName = &quot;Locatie&quot;&#xA;						elementTag.Name = tagName&#xA;						elementTag.Update&#xA;				end select&#xA;			next&#xA;	end select&#xA;end function&#xA;&#xA;function convertRegelsToConstraint(owner, recipient)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	'get the 'Regels' tagged value notes&#xA;	dim constraintContent&#xA;	constraintContent = &quot;&quot; 'initialize empty string&#xA;	for each taggedValue in owner.TaggedValues &#xA;		if lcase(taggedValue.Name) = &quot;regels&quot; AND len(taggedValue.Notes) &gt; 1 then&#xA;			'add a new line if needed&#xA;			if len(constraintContent) &gt; 0 then&#xA;				constraintContent = constraintContent &amp; vbNewLine&#xA;			end if&#xA;			'add the content&#xA;			constraintContent = constraintContent &amp; taggedValue.Notes&#xA;		end if&#xA;	next&#xA;	'create constraint on element if needed&#xA;	if len(constraintContent) &gt; 0 then&#xA;		dim constraintName&#xA;		constraintName = &quot;Constraint from &quot;&#xA;		'figure out the name to use for this owner&#xA;		select case owner.ObjectType&#xA;			case otConnector&#xA;				'get the target element&#xA;				dim targetElement as EA.Element&#xA;				set targetElement = Repository.GetElementByID(owner.SupplierID)&#xA;				constraintName = constraintName &amp; &quot;relation &quot;&#xA;				if len(owner.Name) &gt; 0 then&#xA;					constraintName = constraintName &amp;  &quot;'&quot; &amp; owner.Name &amp; &quot;' &quot;&#xA;				end if&#xA;				constraintName = constraintName &amp; &quot;to '&quot; &amp; targetElement.Name &amp; &quot;'&quot;&#xA;			case otAttribute&#xA;				constraintName = constraintName &amp; &quot;attribute '&quot; &amp; owner.Name &amp; &quot;'&quot;&#xA;			case otElement&#xA;				constraintName = constraintName &amp; &quot;relation &quot;&#xA;				constraintName = constraintName &amp; &quot;to '&quot; &amp; owner.Name &amp; &quot;'&quot;&#xA;		end select&#xA;		'check if the constraint already exists&#xA;		dim constraint as EA.Constraint&#xA;		set constraint = nothing&#xA;		for each constraint in recipient.Constraints&#xA;			if constraint.Name = constraintName then&#xA;				exit for&#xA;			end if&#xA;		next&#xA;		'create it if not found&#xA;		if not IsObject(constraint) then&#xA;			if recipient.ObjectType = otAttribute then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Creating constraint '&quot; &amp; constraintName &amp; &quot;'&quot; &amp; &quot; on '&quot; &amp; recipient.Name &amp; &quot;'&quot;, owner.ElementID&#xA;			else&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Creating constraint '&quot; &amp; constraintName &amp; &quot;'&quot; &amp; &quot; on '&quot; &amp; recipient.Name &amp; &quot;'&quot;, recipient.ElementID&#xA;			end if&#xA;			set constraint = recipient.Constraints.AddNew(constraintName,&quot;Invariant&quot;)&#xA;		end if&#xA;		'set the notes of the constraint to the content&#xA;		constraint.Notes = constraintContent&#xA;		'save the constraint&#xA;		constraint.Update&#xA;	end if&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = getExistingTag(owner, tagname)&#xA;	'create new one if not found&#xA;	if returnTag is nothing then&#xA;		set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;	end if&#xA;	'return&#xA;	set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function getExistingTag(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = nothing&#xA;	'check if a tag with that name already exists&#xA;	for each taggedValue in owner.TaggedValues&#xA;		if taggedValue.Name = tagName then&#xA;			set returnTag = taggedValue&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'return&#xA;	set getExistingTag = returnTag&#xA;end function&#xA;&#xA;function filldatatypesDictionary()&#xA;	if not isObject(datatypesDictionary) then&#xA;		dim sqlGetDatatypes&#xA;		sqlGetDatatypes	= &quot;select o.[Object_ID] from t_object o                         &quot; &amp; _&#xA;							&quot; inner join t_package p on p.[Package_ID] = o.[Package_ID]    &quot; &amp; _&#xA;							&quot; where p.[ea_guid] = '&quot; &amp; datatypePackageGUID &amp; &quot;' &quot; &amp; _&#xA;							&quot; and o.[Object_Type] in ('PrimitiveType', 'Datatype')         &quot;&#xA;		set datatypesDictionary = getElementDictionaryFromQuery(sqlGetDatatypes)&#xA;	end if&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;	dim elements &#xA;	set elements = Repository.GetElementSet(sqlQuery,2)&#xA;	dim result&#xA;	set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;	dim element&#xA;	for each element in elements&#xA;		if not result.Exists(element.Name) then&#xA;		result.Add element.Name, element&#xA;		end if&#xA;	next&#xA;	set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;function fillDatatypeTranslations()&#xA;	if not isObject(dataTypeTranslations) then&#xA;		set dataTypeTranslations = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;		dataTypeTranslations.Add &quot;INDIC&quot;, &quot;Boolean&quot;&#xA;		dataTypeTranslations.Add &quot;AN&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;TXT&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM&quot;, &quot;Date&quot;&#xA;		dataTypeTranslations.Add &quot;DT&quot;, &quot;DateTime&quot;&#xA;		dataTypeTranslations.Add &quot;N&quot;, &quot;Integer&quot;&#xA;		dataTypeTranslations.Add &quot;ND&quot;, &quot;Real&quot;&#xA;		dataTypeTranslations.Add &quot;URI&quot;, &quot;URI&quot;&#xA;		dataTypeTranslations.Add &quot;JAAR&quot;, &quot;Year&quot;&#xA;		dataTypeTranslations.Add &quot;POSTCODE&quot;, &quot;POSTCODE&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM?&quot;, &quot;DMO&quot;&#xA;		dataTypeTranslations.Add &quot;DT?&quot;, &quot;DTMO&quot;&#xA;		dataTypeTranslations.Add &quot;JAARMAAND&quot;, &quot;YearMonth&quot;&#xA;	end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C8D5F646-A4D7-480c-84D6-D729D70E8553}"/>
			<Column name="ScriptAuthor" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Convert MUG metamodel&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Projects\Project K\1 VNG Realisatie Scripts]&#xA;'[group=1 VNG Realisatie Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Converting MUG metamodel&#xA;' Author: Robert Melskens&#xA;' Purpose: Convert the elements of a given package according to the changes in the metamodel for MUG oldstyle to the new metamodel for MUG.&#xA;' Date: 2021-02-15&#xA;'&#xA;&#xA;const outputTabName = &quot;Convert to MUG based on MIM 1.1&quot;&#xA;const datatypePackageGUID = &quot;{A76425DB-C2F6-443f-8C73-33356AFEB13E}&quot;&#xA;const profilename = &quot;VNGR MUG+Grouping NL&quot;&#xA;&#xA;dim datatypesDictionary&#xA;dim dataTypetranslations&#xA;&#xA;sub main&#xA;	'create the output tab&#xA;	Repository.CreateOutputTab outputTabName&#xA;	Repository.ClearOutput outputTabName&#xA;	Repository.EnsureOutputVisible outputTabName&#xA;	'start with selected package&#xA;	dim selectedPackage as EA.Package&#xA;	set selectedPackage = Repository.GetTreeSelectedPackage&#xA;	if not selectedPackage is nothing then&#xA;		select case lcase(selectedPackage.StereotypeEx) = &quot;basismodel&quot;&#xA;			case true&#xA;			  'tell the user we are starting&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Starting conversion to MUG based on MIM 1.1&quot;,0&#xA;			  'correct package stereotype&#xA;			  dim newStereotype&#xA;			  newStereotype = profilename &amp; &quot;::Basismodel&quot;&#xA;			  selectedPackage.StereotypeEx = newStereotype&#xA;			  'do the actual work&#xA;			  convertPackage selectedPackage&#xA;			  'tell the user we are finished&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Finished conversion to MUG based on MIM 1.1&quot;,0&#xA;			case false&#xA;			  msgbox &quot;Please select a 'basismodel' package in the project browser before starting this script&quot;&#xA;		end select&#xA;	else&#xA;	  msgbox &quot;Please select a 'basismodel' package in the project browser before starting this script&quot;&#xA;	end if&#xA;end sub&#xA;&#xA;function convertPackage(selectedPackage)&#xA;	 dim newStereotype&#xA;	'inform the user of the progress&#xA; 	Repository.WriteOutput outputTabName, now() &amp; &quot; Processing package '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#xA;	'correct package stereotype&#xA;	select case lcase(selectedPackage.StereotypeEx)&#xA;		case &quot;domein&quot;&#xA;			newStereotype = profilename &amp; &quot;::Domein&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;intern&quot;&#xA;			newStereotype = profilename &amp; &quot;::Intern&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;prullenbak&quot;&#xA;			newStereotype = profilename &amp; &quot;::Prullenbak&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;	end select&#xA;&#xA;	dim element as EA.Element&#xA;	for each element in selectedPackage.Elements&#xA;		convertElement element&#xA;	next&#xA;	selectedPackage.Update()&#xA;	'loop subPackages&#xA;	dim subPackage as EA.Package&#xA;	for each subPackage in selectedPackage.Packages&#xA;		convertPackage subPackage&#xA;	next&#xA;end function&#xA;&#xA;function convertElement(element)&#xA;	'inform the user of the progress&#xA;	'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing element '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;	dim attribute as EA.Attribute&#xA;	dim newStereotype&#xA;	dim oldStereotype&#xA;	dim relation as EA.Connector&#xA;	dim i&#xA;	dim subElement as EA.Element&#xA;	if lcase(element.Stereotype) = &quot;mug complex datatype&quot; then&#xA;		'make sure we have all attributes&#xA;		element.Attributes.Refresh&#xA;		'loop all attributes&#xA;		for each attribute in element.Attributes&#xA;			convertAttribute attribute, element&#xA;		next&#xA;		'actually change the stereotype&#xA;		newStereotype = profilename &amp; &quot;::Complex datatype&quot;&#xA;		element.StereotypeEx = newStereotype&#xA;		element.Update()&#xA;	else&#xA;		if lcase(element.Stereotype) = &quot;tabel-entiteit&quot; then&#xA;			element.Type = &quot;DataType&quot;&#xA;			element.Update()&#xA;			'loop all relations (backwards because we need to delete them)&#xA;			for i = element.Connectors.Count -1 to 0 step -1&#xA;				set relation = element.Connectors.GetAt(i)&#xA;				convertRelation relation, element, i&#xA;			next&#xA;			'make sure we have all attributes&#xA;			element.Attributes.Refresh&#xA;			'loop all attributes&#xA;			for each attribute in element.Attributes&#xA;				convertAttribute attribute, element&#xA;			next&#xA;			'loop subElements&#xA;			for each subElement in element.Elements&#xA;				convertElement subElement&#xA;			next&#xA;			'actually change the stereotype&#xA;			oldStereotype = element.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			element.StereotypeEx = newStereotype&#xA;			element.Update()&#xA;		else&#xA;			'loop all relations (backwards because we need to delete them)&#xA;			for i = element.Connectors.Count -1 to 0 step -1&#xA;				set relation = element.Connectors.GetAt(i)&#xA;				convertRelation relation, element, i&#xA;			next&#xA;			'make sure we have all attributes&#xA;			element.Attributes.Refresh&#xA;			'loop all attributes&#xA;			for each attribute in element.Attributes&#xA;				convertAttribute attribute, element&#xA;			next&#xA;			'loop subElements&#xA;			for each subElement in element.Elements&#xA;				convertElement subElement&#xA;			next&#xA;			'actually change the stereotype&#xA;			oldStereotype = element.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			element.StereotypeEx = newStereotype&#xA;			element.Update()&#xA;		end if&#xA;	end if&#xA;	element.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;function convertAttribute(attribute, element)&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	'convert datatype&#xA;	convertDatatype attribute, element&#xA;	oldStereotype = attribute.Stereotype&#xA;	if lcase(oldStereotype) = &quot;mug attribute&quot; then&#xA;		newStereotype = profilename &amp; &quot;::Element&quot;&#xA;	else&#xA;		if lcase(oldStereotype) = &quot;mug data element&quot; then&#xA;			newStereotype = profilename &amp; &quot;::Data element&quot;&#xA;		else&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;		end if&#xA;	end if&#xA;	'actually change the stereotype&#xA;	attribute.StereotypeEx = newStereotype&#xA;	attribute.Update()&#xA;end function&#xA;&#xA;function convertDatatype(attribute, element)&#xA;    'only if not already linked to an element&#xA;	'and not for enumeration literals&#xA;	'and not for proxy attribuutsooorten&#xA;	if attribute.ClassifierID &gt; 0 _ &#xA;		OR instr(attribute.StyleEx, &quot;IsLiteral=1&quot;) &gt; 0 then  &#xA;		exit function&#xA;	end if&#xA;	'If no datatype has been provided a message is generated and this function is abandoned.&#xA;	'Probabbly it concerns an enumeration value.&#xA;	if attribute.Type =  &quot;&quot; then&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; WARNING: On attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' no type has been defined (perhaps deliberately).&quot;, element.ElementID&#xA;		exit function&#xA;	end if&#xA;	'get the datatype&#xA;	dim datatypeString &#xA;	datatypeString = attribute.Type&#xA;	'create the datatypeTranslations if needed&#xA;	fillDatatypeTranslations&#xA;	'create the global datatype dictionary if needed&#xA;	filldatatypesDictionary&#xA;	'set to UPPERCASE&#xA;	datatypeString = UCase(datatypeString)&#xA;	'get the datatypeParts&#xA;	Dim regExp		&#xA;	Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;	regExp.Global = True   &#xA;	regExp.IgnoreCase = True&#xA;	regExp.Pattern = &quot;([A-Z?]+)([0-9]+)?(?:(?:[,.])([0-9]*))?&quot;&#xA;	dim matches&#xA;	set matches = regExp.Execute(datatypeString)&#xA;	dim match&#xA;	dim typeName&#xA;	typeName = &quot;&quot;&#xA;	dim lengthValue&#xA;	lengthValue = &quot;&quot;&#xA;	for each match in matches&#xA;		dim subMatch&#xA;		if match.SubMatches.Count &gt; 0 then&#xA;			typeName = match.SubMatches(0)&#xA;			if match.SubMatches.Count &gt; 1 then&#xA;				lengthValue = match.SubMatches(1)&#xA;				if len(lengthValue) &gt; 0 AND match.SubMatches.Count &gt; 2 then&#xA;					dim precisionValue&#xA;					precisionValue = match.SubMatches(2)&#xA;					if len(precisionValue) &gt; 0 then&#xA;						lengthValue = lengthValue + &quot;,&quot; + precisionValue&#xA;						'change N into ND in order to map to &quot;Real&quot;&#xA;						if UCase(typeName) = &quot;N&quot; then&#xA;							typeName = &quot;ND&quot;&#xA;						end if&#xA;					end if&#xA;				end if&#xA;			end if&#xA;		end if&#xA;		exit for 'we only need 1&#xA;	next&#xA;	'get the datatype element&#xA;	dim translatedTypeName&#xA;	if dataTypetranslations.Exists(typeName) then&#xA;		translatedTypeName = dataTypetranslations(typeName)&#xA;		'get the actual datatype element&#xA;		if datatypesDictionary.Exists(translatedTypeName) then&#xA;			dim datatype as EA.Element&#xA;			set datatype = datatypesDictionary(translatedTypeName)&#xA;			'inform the user&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Setting datatype for '&quot; &amp; datatypeString &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			'set the datatype on the attribute&#xA;			attribute.ClassifierID = datatype.ElementID&#xA;			attribute.Type = datatype.Name&#xA;			attribute.Update&#xA;			if len(lengthValue) &gt; 0 then&#xA;				'set the lenth value tagged value&#xA;				dim lengthTaggedValue as EA.AttributeTag&#xA;				set lengthTaggedValue = getExistingOrNewTaggedValue(attribute, &quot;Lengte&quot;)&#xA;				lengthTaggedValue.Value = lengthValue&#xA;				lengthTaggedValue.Update&#xA;			end if&#xA;		else&#xA;			'report error&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Datatype '&quot; &amp; typeName &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' can't be translated automatically to '&quot; &amp; translatedTypeName &amp; &quot;'. Solve this manually.&quot;, element.ElementID&#xA;		end if&#xA;	else&#xA;		'report error&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Invalid datatype on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;	end if&#xA;end function&#xA;&#xA;function getLowerBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getLowerBound = &quot;1&quot;&#xA;	else&#xA;		if cardinality = &quot;*&quot; then&#xA;			getLowerBound = &quot;0&quot;&#xA;		else&#xA;			dim parts&#xA;			parts = Split(cardinality,&quot;..&quot;)&#xA;			getLowerBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function getUpperBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getUpperBound = &quot;1&quot;&#xA;	else&#xA;		dim parts&#xA;		parts = Split(cardinality,&quot;..&quot;)&#xA;		if Ubound(parts) &gt;= 1 then&#xA;			getUpperBound = parts(1)&#xA;		else&#xA;			getUpperBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function addPackageTaggedvalues(package)&#xA;	if lcase(package.Element.Stereotype) = &quot;basismodel&quot; then&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Domein' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Domein&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Informatiemodel type' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Informatiemodel type&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'Relatiemodelleringstype' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;Relatiemodelleringstype&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM versie' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM versie&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM extensie' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM extensie&quot;, &quot;&quot;&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provided Tagged Value 'MIM taal' for '&quot; &amp; package.Name &amp; &quot;. Provide a value '&quot;, package.Element.ElementID&#xA;		addElementTaggedvalue package.Element, &quot;MIM taal&quot;, &quot;&quot;&#xA;	end if&#xA;	package.Element.Refresh()&#xA;end function&#xA;&#xA;function convertRelation(relation, element,i)&#xA;	'get the target element&#xA;	'move �gegevensgroep compositie� relation to attribute using the gegevensgrouptype as type&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	if lcase(relation.Stereotype) = &quot;gegevensgroep compositie&quot; _&#xA;	   AND relation.ClientID = element.ElementID then&#xA;		dim targetElement as EA.Element&#xA;		set targetElement = Repository.GetElementByID(relation.SupplierID)&#xA;		'inform the user of the progress&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Processing relation to '&quot; &amp; targetElement.Name &amp; &quot;'&quot;, element.ElementID&#xA;		newStereotype = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;		'create new attribute on the element&#xA;		dim attribute as EA.Attribute&#xA;		set attribute = element.Attributes.AddNew(targetElement.Name, targetElement.Name)&#xA;		attribute.ClassifierID = targetElement.ElementID&#xA;		attribute.Notes = targetElement.Notes&#xA;		attribute.LowerBound = getLowerBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.UpperBound = getUpperBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.Update()&#xA;		'remove the notes from the target element&#xA;		targetElement.Notes = &quot;&quot;&#xA;		targetElement.Update&#xA;		'check if a SourceAssociation tagged value is present&#xA;		dim idx&#xA;		dim sourceAssociation&#xA;		dim relationTag as EA.TaggedValue&#xA;		for idx = 0 to relation.TaggedValues.Count-1&#xA;			set relationTag = relation.TaggedValues.GetAt(idx)&#xA;			if lcase(relationTag.Name) = &quot;sourceassociation&quot; then&#xA;				sourceAssociation = true&#xA;			end if&#xA;		next&#xA; 		'remove the relation&#xA;		element.Connectors.DeleteAt i, false&#xA;		element.Refresh()		&#xA;		'move also all(?) tagged values from gegevensgroeptype to gegevensgroep&#xA;		dim elementTag as EA.TaggedValue&#xA;		for each elementTag in targetElement.TaggedValues&#xA;			dim attributeTag as EA.AttributeTag&#xA;			dim tagName&#xA;			dim tagValue&#xA;			dim tagNotes&#xA;			if lcase(elementTag.Name) = &quot;indicatie authentiek&quot; then&#xA;				tagName = &quot;Authentiek&quot;&#xA;			else&#xA;				tagName = elementTag.Name&#xA;			end if&#xA;			tagValue  = elementTag.Value&#xA;			'get the corresponding tag on the attribute&#xA;			set attributeTag = getExistingTag(attribute, tagName)&#xA;			if not attributeTag is nothing then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; attributeTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;				'copy value&#xA;				attributeTag.Value = tagValue&#xA;				'copy notes if of type &quot;memo&quot;&#xA;				if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;					attributeTag.Notes = elementTag.Notes&#xA;				end if&#xA;				attributeTag.Update&#xA;			end if&#xA;		next&#xA;		element.Refresh()		&#xA;		' create the tagged value sourceAttribute if the tagged value sourceAssociation was present on the relation&#xA;		if sourceAssociation = true then&#xA;			dim tags as EA.Collection&#xA;			set tags = attribute.TaggedValues&#xA;			&#xA;			dim newTag as EA.AttributeTag&#xA;			set newTag = tags.AddNew( &quot;SourceAttribute&quot;, &quot;&quot; )&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provide a value for the Tagged Value 'SourceAttribute' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			newTag.Update()&#xA;			tags.Refresh()&#xA;		end if&#xA;		'remove taggedvalues&#xA;		removeElementTaggedvalue targetElement&#xA;		'actually change the stereotype&#xA;		attribute.StereotypeEx = newStereotype&#xA;		attribute.Update()&#xA;	else&#xA;		if lcase(relation.Type) = &quot;abstraction&quot; then&#xA;			'change the stereotype&#xA;			newStereotype = &quot;EAUML::trace&quot;&#xA;			relation.StereotypeEx = newStereotype&#xA;			relation.Update()&#xA;		else&#xA;			'change the stereotype&#xA;			oldStereotype = relation.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			relation.StereotypeEx = newStereotype&#xA;			relation.Update()&#xA;		end if&#xA;	end if&#xA;	'convert taggedvalues for EndConnector&#xA;	dim connectorTarget as EA.ConnectorEnd&#xA;	set connectorTarget = relation.SupplierEnd&#xA;	element.Refresh()&#xA;	relation.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;function removeTaggedvalue(child, element, idx, tvtype, tag)&#xA;	select case tvtype&#xA;		case &quot;attribute&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;relation&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;element&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;			element.TaggedValues.DeleteAt idx, false&#xA;	end select&#xA;end function&#xA;&#xA;function removeElementTaggedvalue(element)&#xA;	dim idx&#xA;	dim elementTag &#xA;	select case lcase(element.Stereotype)&#xA;		case &quot;groep&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie materi�le historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie formele historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie in onderzoek&quot; &#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;aanduiding strijdigheid/nietigheid&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie authentiek&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;mogeljk geen waarde&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;	end select&#xA;end function&#xA;&#xA;function addElementTaggedvalue(element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	Repository.WriteOutput outputTabName, now() &amp; &quot; Taggedvalue value '&quot; &amp; elementTaggedValue.Value, element.ElementID&#xA;	elementTaggedValue.Value = tagValue&#xA;	if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;		attributeTaggedValue.Notes = elementTaggedValue.Notes&#xA;	end if&#xA;	elementTaggedValue.Update&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = getExistingTag(owner, tagname)&#xA;	'create new one if not found&#xA;	if returnTag is nothing then&#xA;		set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;	end if&#xA;	'return&#xA;	set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function getExistingTag(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = nothing&#xA;	'check if a tag with that name already exists&#xA;	for each taggedValue in owner.TaggedValues&#xA;		if taggedValue.Name = tagName then&#xA;			set returnTag = taggedValue&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'return&#xA;	set getExistingTag = returnTag&#xA;end function&#xA;&#xA;function filldatatypesDictionary()&#xA;	if not isObject(datatypesDictionary) then&#xA;		dim sqlGetDatatypes&#xA;		sqlGetDatatypes	= &quot;select o.[Object_ID] from t_object o                         &quot; &amp; _&#xA;							&quot; inner join t_package p on p.[Package_ID] = o.[Package_ID]    &quot; &amp; _&#xA;							&quot; where p.[ea_guid] = '&quot; &amp; datatypePackageGUID &amp; &quot;' &quot; &amp; _&#xA;							&quot; and o.[Object_Type] in ('PrimitiveType', 'Datatype')         &quot;&#xA;		set datatypesDictionary = getElementDictionaryFromQuery(sqlGetDatatypes)&#xA;	end if&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;	dim elements &#xA;	set elements = Repository.GetElementSet(sqlQuery,2)&#xA;	dim result&#xA;	set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;	dim element&#xA;	for each element in elements&#xA;		if not result.Exists(element.Name) then&#xA;		result.Add element.Name, element&#xA;		end if&#xA;	next&#xA;	set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;function fillDatatypeTranslations()&#xA;	if not isObject(dataTypeTranslations) then&#xA;		set dataTypeTranslations = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;		dataTypeTranslations.Add &quot;INDIC&quot;, &quot;Boolean&quot;&#xA;		dataTypeTranslations.Add &quot;AN&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;TXT&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM&quot;, &quot;Date&quot;&#xA;		dataTypeTranslations.Add &quot;DT&quot;, &quot;DateTime&quot;&#xA;		dataTypeTranslations.Add &quot;N&quot;, &quot;Integer&quot;&#xA;		dataTypeTranslations.Add &quot;ND&quot;, &quot;Real&quot;&#xA;		dataTypeTranslations.Add &quot;URI&quot;, &quot;URI&quot;&#xA;		dataTypeTranslations.Add &quot;JAAR&quot;, &quot;Year&quot;&#xA;		dataTypeTranslations.Add &quot;POSTCODE&quot;, &quot;POSTCODE&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM?&quot;, &quot;DMO&quot;&#xA;		dataTypeTranslations.Add &quot;DT?&quot;, &quot;DTMO&quot;&#xA;		dataTypeTranslations.Add &quot;JAARMAAND&quot;, &quot;YearMonth&quot;&#xA;	end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{84AB6712-FF47-4d34-89C9-43F4AB9C51A6}"/>
			<Column name="ScriptAuthor" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Convert MBG metamodel&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Projects\Project K\1 VNG Realisatie Scripts]&#xA;'[group=1 VNG Realisatie Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Converting MBG metamodel&#xA;' Author: Robert Melskens&#xA;' Purpose: Convert the elements of a given package according to the changes in the metamodel for MUG oldstyle to the new metamodel for MUG.&#xA;'		   Besides that also tidy up stereotypes of the MBG metamodel.&#xA;' Date: 2021-02-17&#xA;'&#xA;&#xA;const outputTabName = &quot;Convert to MBG based on MIM 1.1&quot;&#xA;const datatypePackageGUID = &quot;{A76425DB-C2F6-443f-8C73-33356AFEB13E}&quot;&#xA;const profilename = &quot;VNGR MUG+Grouping NL&quot;&#xA;const profilenameMBG = &quot;VNGR MBG+Grouping NL&quot;&#xA;&#xA;dim datatypesDictionary&#xA;dim dataTypetranslations&#xA;&#xA;sub main&#xA;	'create the output tab&#xA;	Repository.CreateOutputTab outputTabName&#xA;	Repository.ClearOutput outputTabName&#xA;	Repository.EnsureOutputVisible outputTabName&#xA;	'start with selected package&#xA;	dim selectedPackage as EA.Package&#xA;	set selectedPackage = Repository.GetTreeSelectedPackage&#xA;	if not selectedPackage is nothing then&#xA;		select case lcase(selectedPackage.StereotypeEx) = &quot;koppelvlak&quot;&#xA;			case true&#xA;			  'tell the user we are starting&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Starting conversion to MBG based on MIM 1.1&quot;,0&#xA;			  'correct package stereotype&#xA;			  dim newStereotype&#xA;			  newStereotype = profilenameMBG &amp; &quot;::Koppelvlak&quot;&#xA;			  selectedPackage.StereotypeEx = newStereotype&#xA;			  'do the actual work&#xA;			  convertPackage selectedPackage&#xA;			  'tell the user we are finished&#xA;			  Repository.WriteOutput outputTabName, now() &amp; &quot; Finished conversion to MBG based on MIM 1.1&quot;,0&#xA;			case false&#xA;			  msgbox &quot;Please select a 'Koppelvlak' package in the project browser before starting this script&quot;&#xA;		end select&#xA;	else&#xA;	  msgbox &quot;Please select a 'Koppelvlak' package in the project browser before starting this script&quot;&#xA;	end if&#xA;end sub&#xA;&#xA;function convertPackage(selectedPackage)&#xA;	 dim newStereotype&#xA;	'inform the user of the progress&#xA; 	Repository.WriteOutput outputTabName, now() &amp; &quot; Processing package '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#xA;	'correct package stereotype&#xA;	select case lcase(selectedPackage.StereotypeEx)&#xA;		case &quot;bericht&quot;&#xA;			newStereotype = profilenameMBG &amp; &quot;::Bericht&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;domein&quot;&#xA;			newStereotype = profilename &amp; &quot;::Domein&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;intern&quot;&#xA;			newStereotype = profilename &amp; &quot;::Intern&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;		case &quot;prullenbak&quot;&#xA;			newStereotype = profilename &amp; &quot;::Prullenbak&quot;&#xA;			selectedPackage.StereotypeEx = newStereotype&#xA;	end select&#xA;&#xA;	dim element as EA.Element&#xA;	for each element in selectedPackage.Elements&#xA;		convertElement element&#xA;	next&#xA;	selectedPackage.Update()&#xA;	'loop subPackages&#xA;	dim subPackage as EA.Package&#xA;	for each subPackage in selectedPackage.Packages&#xA;		convertPackage subPackage&#xA;	next&#xA;end function&#xA;&#xA;function convertElement(element)&#xA;	'inform the user of the progress&#xA;	'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing element '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;	dim attribute as EA.Attribute&#xA;	dim newStereotype&#xA;	dim oldStereotype&#xA;	dim relation as EA.Connector&#xA;	dim i&#xA;	dim subElement as EA.Element&#xA;	if lcase(element.Stereotype) = &quot;mug complex datatype&quot; then&#xA;		'make sure we have all attributes&#xA;		element.Attributes.Refresh&#xA;		'loop all attributes&#xA;		for each attribute in element.Attributes&#xA;			convertAttribute attribute, element&#xA;		next&#xA;		'actually change the stereotype&#xA;		newStereotype = profilename &amp; &quot;::Complex datatype&quot;&#xA;		element.StereotypeEx = newStereotype&#xA;		element.Update()&#xA;	else&#xA;		if lcase(element.Stereotype) = &quot;tabel-entiteit&quot; then&#xA;			element.Type = &quot;DataType&quot;&#xA;			element.Update()&#xA;			'loop all relations (backwards because we need to delete them)&#xA;			for i = element.Connectors.Count -1 to 0 step -1&#xA;				set relation = element.Connectors.GetAt(i)&#xA;				convertRelation relation, element, i&#xA;			next&#xA;			'make sure we have all attributes&#xA;			element.Attributes.Refresh&#xA;			'loop all attributes&#xA;			for each attribute in element.Attributes&#xA;				convertAttribute attribute, element&#xA;			next&#xA;			'loop subElements&#xA;			for each subElement in element.Elements&#xA;				convertElement subElement&#xA;			next&#xA;			'actually change the stereotype&#xA;			oldStereotype = element.Stereotype&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;			element.StereotypeEx = newStereotype&#xA;			element.Update()&#xA;		else&#xA;			if lcase(element.Stereotype) = &quot;padtype&quot; OR _&#xA;			   lcase(element.Stereotype) = &quot;deleteberichttype&quot; OR _&#xA;			   lcase(element.Stereotype) = &quot;getberichttype&quot; OR _&#xA;			   lcase(element.Stereotype) = &quot;patchberichttype&quot; OR _&#xA;			   lcase(element.Stereotype) = &quot;postberichttype&quot; OR _&#xA;			   lcase(element.Stereotype) = &quot;putberichttype&quot; then&#xA;				element.Type = &quot;Class&quot;&#xA;				element.Update()&#xA;				'loop all relations (backwards because we need to delete them)&#xA;				for i = element.Connectors.Count -1 to 0 step -1&#xA;					set relation = element.Connectors.GetAt(i)&#xA;					convertRelation relation, element, i&#xA;				next&#xA;				'actually change the stereotype&#xA;				oldStereotype = element.Stereotype&#xA;				newStereotype = profilenameMBG &amp; &quot;::&quot; &amp; oldStereotype&#xA;				element.StereotypeEx = newStereotype&#xA;				element.Update()&#xA;			else&#xA;				'loop all relations (backwards because we need to delete them)&#xA;				for i = element.Connectors.Count -1 to 0 step -1&#xA;					set relation = element.Connectors.GetAt(i)&#xA;					convertRelation relation, element, i&#xA;				next&#xA;				'make sure we have all attributes&#xA;				element.Attributes.Refresh&#xA;				'loop all attributes&#xA;				for each attribute in element.Attributes&#xA;					convertAttribute attribute, element&#xA;				next&#xA;				'loop subElements&#xA;				for each subElement in element.Elements&#xA;					convertElement subElement&#xA;				next&#xA;				'actually change the stereotype&#xA;				oldStereotype = element.Stereotype&#xA;				newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;				element.StereotypeEx = newStereotype&#xA;				element.Update()&#xA;			end if&#xA;		end if&#xA;	end if&#xA;	element.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;function convertAttribute(attribute, element)&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	'convert datatype&#xA;	convertDatatype attribute, element&#xA;	oldStereotype = attribute.Stereotype&#xA;	if lcase(oldStereotype) = &quot;mug attribute&quot; then&#xA;		newStereotype = profilename &amp; &quot;::Element&quot;&#xA;	else&#xA;		if lcase(oldStereotype) = &quot;mug data element&quot; then&#xA;			newStereotype = profilename &amp; &quot;::Data element&quot;&#xA;		else&#xA;			newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;		end if&#xA;	end if&#xA;	'actually change the stereotype&#xA;	attribute.StereotypeEx = newStereotype&#xA;	attribute.Update()&#xA;end function&#xA;&#xA;function convertDatatype(attribute, element)&#xA;    'only if not already linked to an element&#xA;	'and not for enumeration literals&#xA;	'and not for proxy attribuutsooorten&#xA;	if attribute.ClassifierID &gt; 0 _ &#xA;		OR instr(attribute.StyleEx, &quot;IsLiteral=1&quot;) &gt; 0 then  &#xA;		exit function&#xA;	end if&#xA;	'If no datatype has been provided a message is generated and this function is abandoned.&#xA;	'Probabbly it concerns an enumeration value.&#xA;	if attribute.Type =  &quot;&quot; then&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; WARNING: On attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' no type has been defined (perhaps deliberately).&quot;, element.ElementID&#xA;		exit function&#xA;	end if&#xA;	'get the datatype&#xA;	dim datatypeString &#xA;	datatypeString = attribute.Type&#xA;	'create the datatypeTranslations if needed&#xA;	fillDatatypeTranslations&#xA;	'create the global datatype dictionary if needed&#xA;	filldatatypesDictionary&#xA;	'set to UPPERCASE&#xA;	datatypeString = UCase(datatypeString)&#xA;	'get the datatypeParts&#xA;	Dim regExp		&#xA;	Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;	regExp.Global = True   &#xA;	regExp.IgnoreCase = True&#xA;	regExp.Pattern = &quot;([A-Z?]+)([0-9]+)?(?:(?:[,.])([0-9]*))?&quot;&#xA;	dim matches&#xA;	set matches = regExp.Execute(datatypeString)&#xA;	dim match&#xA;	dim typeName&#xA;	typeName = &quot;&quot;&#xA;	dim lengthValue&#xA;	lengthValue = &quot;&quot;&#xA;	for each match in matches&#xA;		dim subMatch&#xA;		if match.SubMatches.Count &gt; 0 then&#xA;			typeName = match.SubMatches(0)&#xA;			if match.SubMatches.Count &gt; 1 then&#xA;				lengthValue = match.SubMatches(1)&#xA;				if len(lengthValue) &gt; 0 AND match.SubMatches.Count &gt; 2 then&#xA;					dim precisionValue&#xA;					precisionValue = match.SubMatches(2)&#xA;					if len(precisionValue) &gt; 0 then&#xA;						lengthValue = lengthValue + &quot;,&quot; + precisionValue&#xA;						'change N into ND in order to map to &quot;Real&quot;&#xA;						if UCase(typeName) = &quot;N&quot; then&#xA;							typeName = &quot;ND&quot;&#xA;						end if&#xA;					end if&#xA;				end if&#xA;			end if&#xA;		end if&#xA;		exit for 'we only need 1&#xA;	next&#xA;	'get the datatype element&#xA;	dim translatedTypeName&#xA;	if dataTypetranslations.Exists(typeName) then&#xA;		translatedTypeName = dataTypetranslations(typeName)&#xA;		'get the actual datatype element&#xA;		if datatypesDictionary.Exists(translatedTypeName) then&#xA;			dim datatype as EA.Element&#xA;			set datatype = datatypesDictionary(translatedTypeName)&#xA;			'inform the user&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Setting datatype for '&quot; &amp; datatypeString &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			'set the datatype on the attribute&#xA;			attribute.ClassifierID = datatype.ElementID&#xA;			attribute.Type = datatype.Name&#xA;			attribute.Update&#xA;			if len(lengthValue) &gt; 0 then&#xA;				'set the lenth value tagged value&#xA;				dim lengthTaggedValue as EA.AttributeTag&#xA;				set lengthTaggedValue = getExistingOrNewTaggedValue(attribute, &quot;Lengte&quot;)&#xA;				lengthTaggedValue.Value = lengthValue&#xA;				lengthTaggedValue.Update&#xA;			end if&#xA;		else&#xA;			'report error&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Datatype '&quot; &amp; typeName &amp; &quot;' on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' can't be translated automatically to '&quot; &amp; translatedTypeName &amp; &quot;'. Solve this manually.&quot;, element.ElementID&#xA;		end if&#xA;	else&#xA;		'report error&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; ERROR: Invalid datatype on attribute '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;	end if&#xA;end function&#xA;&#xA;function getLowerBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getLowerBound = &quot;1&quot;&#xA;	else&#xA;		if cardinality = &quot;*&quot; then&#xA;			getLowerBound = &quot;0&quot;&#xA;		else&#xA;			dim parts&#xA;			parts = Split(cardinality,&quot;..&quot;)&#xA;			getLowerBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function getUpperBound(cardinality)&#xA;	if cardinality = &quot;&quot; then&#xA;		getUpperBound = &quot;1&quot;&#xA;	else&#xA;		dim parts&#xA;		parts = Split(cardinality,&quot;..&quot;)&#xA;		if Ubound(parts) &gt;= 1 then&#xA;			getUpperBound = parts(1)&#xA;		else&#xA;			getUpperBound = parts(0)&#xA;		end if&#xA;	end if&#xA;end function&#xA;&#xA;function convertRelation(relation, element,i)&#xA;	'get the target element&#xA;	'move �gegevensgroep compositie� relation to attribute using the gegevensgrouptype as type&#xA;	dim oldStereotype&#xA;	dim newStereotype&#xA;	if lcase(relation.Stereotype) = &quot;gegevensgroep compositie&quot; _&#xA;	   AND relation.ClientID = element.ElementID then&#xA;		dim targetElement as EA.Element&#xA;		set targetElement = Repository.GetElementByID(relation.SupplierID)&#xA;		'inform the user of the progress&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Processing relation to '&quot; &amp; targetElement.Name &amp; &quot;'&quot;, element.ElementID&#xA;		newStereotype = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;		'create new attribute on the element&#xA;		dim attribute as EA.Attribute&#xA;		set attribute = element.Attributes.AddNew(targetElement.Name, targetElement.Name)&#xA;		attribute.ClassifierID = targetElement.ElementID&#xA;		attribute.Notes = targetElement.Notes&#xA;		attribute.LowerBound = getLowerBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.UpperBound = getUpperBound(relation.SupplierEnd.Cardinality)&#xA;		attribute.Update()&#xA;		'remove the notes from the target element&#xA;		targetElement.Notes = &quot;&quot;&#xA;		targetElement.Update&#xA;		'check if a SourceAssociation tagged value is present&#xA;		dim idx&#xA;		dim sourceAssociation&#xA;		dim relationTag as EA.TaggedValue&#xA;		for idx = 0 to relation.TaggedValues.Count-1&#xA;			set relationTag = relation.TaggedValues.GetAt(idx)&#xA;			if lcase(relationTag.Name) = &quot;sourceassociation&quot; then&#xA;				sourceAssociation = true&#xA;			end if&#xA;		next&#xA; 		'remove the relation&#xA;		element.Connectors.DeleteAt i, false&#xA;		element.Refresh()		&#xA;		'move also all(?) tagged values from gegevensgroeptype to gegevensgroep&#xA;		dim elementTag as EA.TaggedValue&#xA;		for each elementTag in targetElement.TaggedValues&#xA;			dim attributeTag as EA.AttributeTag&#xA;			dim tagName&#xA;			dim tagValue&#xA;			dim tagNotes&#xA;			if lcase(elementTag.Name) = &quot;indicatie authentiek&quot; then&#xA;				tagName = &quot;Authentiek&quot;&#xA;			else&#xA;				tagName = elementTag.Name&#xA;			end if&#xA;			tagValue  = elementTag.Value&#xA;			'get the corresponding tag on the attribute&#xA;			set attributeTag = getExistingTag(attribute, tagName)&#xA;			if not attributeTag is nothing then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Providing Tagged Value '&quot; &amp; attributeTag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' with value '&quot; &amp; tagValue &amp; &quot;'&quot;, element.ElementID&#xA;				'copy value&#xA;				attributeTag.Value = tagValue&#xA;				'copy notes if of type &quot;memo&quot;&#xA;				if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;					attributeTag.Notes = elementTag.Notes&#xA;				end if&#xA;				attributeTag.Update&#xA;			end if&#xA;		next&#xA;		element.Refresh()		&#xA;		' create the tagged value sourceAttribute if the tagged value sourceAssociation was present on the relation&#xA;		if sourceAssociation = true then&#xA;			dim tags as EA.Collection&#xA;			set tags = attribute.TaggedValues&#xA;			&#xA;			dim newTag as EA.AttributeTag&#xA;			set newTag = tags.AddNew( &quot;SourceAttribute&quot;, &quot;&quot; )&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; ACTION REQUIRED: Provide a value for the Tagged Value 'SourceAttribute' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;'&quot;, element.ElementID&#xA;			newTag.Update()&#xA;			tags.Refresh()&#xA;		end if&#xA;		'remove taggedvalues&#xA;		removeElementTaggedvalue targetElement&#xA;		'actually change the stereotype&#xA;		attribute.StereotypeEx = newStereotype&#xA;		attribute.Update()&#xA;	else&#xA;		if lcase(relation.Stereotype) = &quot;padrelatie&quot; then&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Changing stereotype 'Padrelatie' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; relation.Name &amp; &quot;'&quot;, element.ElementID&#xA;			'change the stereotype&#xA;			newStereotype = profilenameMBG &amp; &quot;::PadRelatie&quot;&#xA;			relation.StereotypeEx = newStereotype&#xA;			relation.Update()&#xA;		else&#xA;			if lcase(relation.Stereotype) = &quot;entiteitrelatie&quot; then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Changing stereotype 'Entiteitrelatie' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; relation.Name &amp; &quot;'&quot;, element.ElementID&#xA;				'change the stereotype&#xA;				newStereotype = profilenameMBG &amp; &quot;::EntiteitRelatie&quot;&#xA;				relation.StereotypeEx = newStereotype&#xA;				relation.Update()&#xA;			else&#xA;				if lcase(relation.Type) = &quot;abstraction&quot; then&#xA;					'change the stereotype&#xA;					newStereotype = &quot;EAUML::trace&quot;&#xA;					relation.StereotypeEx = newStereotype&#xA;					relation.Update()&#xA;				else&#xA;					'change the stereotype&#xA;					oldStereotype = relation.Stereotype&#xA;					newStereotype = profilename &amp; &quot;::&quot; &amp; oldStereotype&#xA;					relation.StereotypeEx = newStereotype&#xA;					relation.Update()&#xA;				end if&#xA;			end if&#xA;		end if&#xA;	end if&#xA;	'convert taggedvalues for EndConnector&#xA;	dim connectorTarget as EA.ConnectorEnd&#xA;	set connectorTarget = relation.SupplierEnd&#xA;	element.Refresh()&#xA;	relation.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;function removeTaggedvalue(child, element, idx, tvtype, tag)&#xA;	select case tvtype&#xA;		case &quot;attribute&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;relation&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;.&quot; &amp; child.Name &amp; &quot;'&quot;, element.ElementID&#xA;			child.TaggedValues.DeleteAt idx, false&#xA;		case &quot;element&quot;&#xA;			Repository.WriteOutput outputTabName, now() &amp; &quot; Deleting Tagged Value '&quot; &amp; tag.Name &amp; &quot;' for '&quot; &amp; element.Name &amp; &quot;'&quot;, element.ElementID&#xA;			element.TaggedValues.DeleteAt idx, false&#xA;	end select&#xA;end function&#xA;&#xA;function removeElementTaggedvalue(element)&#xA;	dim idx&#xA;	dim elementTag &#xA;	select case lcase(element.Stereotype)&#xA;		case &quot;groep&quot;&#xA;			element.TaggedValues.Refresh()			&#xA;			for idx = 0 to element.TaggedValues.Count-1&#xA;				set elementTag = element.TaggedValues.GetAt(idx)&#xA;				select case lcase(elementTag.Name)&#xA;					case &quot;herkomst&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie materi�le historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie formele historie&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie in onderzoek&quot; &#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;aanduiding strijdigheid/nietigheid&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;indicatie authentiek&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;mogeljk geen waarde&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;code&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;					case &quot;regels&quot;&#xA;						removeTaggedvalue nothing, element, idx, &quot;element&quot;, elementTag&#xA;				end select&#xA;			next&#xA;	end select&#xA;end function&#xA;&#xA;function addElementTaggedvalue(element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	Repository.WriteOutput outputTabName, now() &amp; &quot; Taggedvalue value '&quot; &amp; elementTaggedValue.Value, element.ElementID&#xA;	elementTaggedValue.Value = tagValue&#xA;	if tagValue = &quot;&lt;memo&gt;&quot; then&#xA;		attributeTaggedValue.Notes = elementTaggedValue.Notes&#xA;	end if&#xA;	elementTaggedValue.Update&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = getExistingTag(owner, tagname)&#xA;	'create new one if not found&#xA;	if returnTag is nothing then&#xA;		set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;	end if&#xA;	'return&#xA;	set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function getExistingTag(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = nothing&#xA;	'check if a tag with that name already exists&#xA;	for each taggedValue in owner.TaggedValues&#xA;		if taggedValue.Name = tagName then&#xA;			set returnTag = taggedValue&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'return&#xA;	set getExistingTag = returnTag&#xA;end function&#xA;&#xA;function filldatatypesDictionary()&#xA;	if not isObject(datatypesDictionary) then&#xA;		dim sqlGetDatatypes&#xA;		sqlGetDatatypes	= &quot;select o.[Object_ID] from t_object o                         &quot; &amp; _&#xA;							&quot; inner join t_package p on p.[Package_ID] = o.[Package_ID]    &quot; &amp; _&#xA;							&quot; where p.[ea_guid] = '&quot; &amp; datatypePackageGUID &amp; &quot;' &quot; &amp; _&#xA;							&quot; and o.[Object_Type] in ('PrimitiveType', 'Datatype')         &quot;&#xA;		set datatypesDictionary = getElementDictionaryFromQuery(sqlGetDatatypes)&#xA;	end if&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;	dim elements &#xA;	set elements = Repository.GetElementSet(sqlQuery,2)&#xA;	dim result&#xA;	set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;	dim element&#xA;	for each element in elements&#xA;		if not result.Exists(element.Name) then&#xA;		result.Add element.Name, element&#xA;		end if&#xA;	next&#xA;	set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;function fillDatatypeTranslations()&#xA;	if not isObject(dataTypeTranslations) then&#xA;		set dataTypeTranslations = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;		dataTypeTranslations.Add &quot;INDIC&quot;, &quot;Boolean&quot;&#xA;		dataTypeTranslations.Add &quot;AN&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;TXT&quot;, &quot;CharacterString&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM&quot;, &quot;Date&quot;&#xA;		dataTypeTranslations.Add &quot;DT&quot;, &quot;DateTime&quot;&#xA;		dataTypeTranslations.Add &quot;N&quot;, &quot;Integer&quot;&#xA;		dataTypeTranslations.Add &quot;ND&quot;, &quot;Real&quot;&#xA;		dataTypeTranslations.Add &quot;URI&quot;, &quot;URI&quot;&#xA;		dataTypeTranslations.Add &quot;JAAR&quot;, &quot;Year&quot;&#xA;		dataTypeTranslations.Add &quot;POSTCODE&quot;, &quot;POSTCODE&quot;&#xA;		dataTypeTranslations.Add &quot;DATUM?&quot;, &quot;DMO&quot;&#xA;		dataTypeTranslations.Add &quot;DT?&quot;, &quot;DTMO&quot;&#xA;		dataTypeTranslations.Add &quot;JAARMAAND&quot;, &quot;YearMonth&quot;&#xA;	end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
	</DataSet>
</RefData>
