<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{108670E1-04D1-4318-9A6A-557E9B58D9DC}"/>
			<Column name="ScriptAuthor" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability with Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC 1 VNG Realisatie scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2016-02-08&#xA;'&#xA;SetTraceability true"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="1 VNG Realisatie scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C20CE956-05AD-423f-AF8D-724487E6EA96}"/>
			<Column name="ScriptAuthor" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability without Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC 1 VNG Realisatie scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set Traceability without Transformation&#xA;' Author: Geert Bellekens&#xA;' Purpose: Set traceability between elements, attributes and associations, but without the metamodel transformation&#xA;' Date: 2016-08-05&#xA;&#xA;SetTraceability false"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AAAFD163-89C9-49e8-8BDB-108356BFC563}"/>
			<Column name="ScriptAuthor" value="{CAE6ABD8-AA1B-42d4-97D3-84C393A54682}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SetTraceabilityMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Changed by: Robert Melskens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2023-06-08&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Set Traceability&quot;&#xA;dim isTransform&#xA;isTransform = false&#xA;const profilename = &quot;VNGR MUG+Grouping NL&quot;&#xA;&#xA;&#xA;sub SetTraceability(withTransformation)&#xA;&#xA;	Repository.CreateOutputTab outputTabName&#xA;	Repository.ClearOutput outputTabName&#xA;	Repository.EnsureOutputVisible outputTabName&#xA;	Repository.EnableUIUpdates = false&#xA;	&#xA;	isTransform = withTransformation&#xA;	dim copyPackage as EA.Package&#xA;	dim originalPackage as EA.Package&#xA;	'the copy package is the one selected in the project browser&#xA;	set copyPackage = Repository.GetTreeSelectedPackage&#xA;	msgbox &quot;Please select the original package&quot;&#xA;	'the original package is the one selected by the user&#xA;	dim originalPackageID&#xA;	dim originalPackageElementID&#xA;	originalPackageElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package;Selection=&quot; &amp; copyPackage.PackageGUID)&#xA;	if originalPackageElementID &gt; 0 then&#xA;		dim originalPackageElement as EA.Element&#xA;		set originalPackageElement = Repository.GetElementByID(originalPackageElementID)&#xA;		set originalPackage = Repository.GetPackageByGuid(originalPackageElement.ElementGUID)&#xA;&#xA;		dim copyPackageElement as EA.Element&#xA;		set copyPackageElement = copyPackage.Element&#xA;		select case originalPackageElement.Stereotype&#xA;			case &quot;Basismodel&quot;&#xA;				copyPackageElement.StereotypeEx = profilename &amp; &quot;::Basismodel&quot;&#xA;		end select&#xA;		copyPackage.Update()&#xA;&#xA;		'tell the user we are starting&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Starting adding traces&quot;,0&#xA;		'start the trace		&#xA;		tracePackageElements originalPackage, copyPackage&#xA;		Repository.WriteOutput outputTabName, now() &amp; &quot; Finished adding traces&quot;,0&#xA;	end if&#xA;	Repository.EnableUIUpdates = true&#xA;	Repository.RefreshModelView copyPackage.PackageID&#xA;end sub&#xA;&#xA;function tracePackageElements(originalPackage, copyPackage)&#xA;	dim originalElement as EA.Element&#xA;	dim copyElement as EA.Element&#xA;	'find corresponding element&#xA;	for each originalElement in originalPackage.Elements&#xA;		'only process elements that have a name&#xA;		if len(originalElement.Name) &gt; 0 then&#xA;			'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			dim matchFound&#xA;			matchFound = false&#xA;			for each copyElement in copyPackage.Elements&#xA;				if copyElement.Name = originalElement.Name then&#xA;					'found a match&#xA;					traceElements originalElement,copyElement&#xA;					if isTransform then&#xA;						transformElement originalElement,copyElement&#xA;					end if&#xA;					matchFound = true&#xA;					exit for&#xA;				end if&#xA;			next&#xA;			if matchFound then&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Match found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			else&#xA;				Repository.WriteOutput outputTabName, now() &amp; &quot; Match NOT found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;			end if&#xA;		end if&#xA;	next&#xA;	'process subpackages&#xA;	dim originalSubPackage as EA.Package&#xA;	dim copySubPackage as EA.Package&#xA;	for each originalSubPackage in originalPackage.Packages&#xA;		for each copySubPackage in copyPackage.Packages&#xA;			dim originalSubPackageElement as EA.Element&#xA;			dim copySubPackageElement as EA.Element&#xA;			set originalSubPackageElement = originalSubPackage.Element&#xA;			set copySubPackageElement = copySubPackage.Element&#xA;&#xA;			select case originalSubPackageElement.Stereotype&#xA;				case &quot;Domein&quot;&#xA;					copySubPackageElement.StereotypeEx = profilename &amp; &quot;::Domein&quot;&#xA;			end select&#xA;			copySubPackage.Update()&#xA;					&#xA;			if originalSubPackage.Name = copySubpackage.Name then&#xA;				'found a match&#xA;				tracePackageElements originalSubPackage, copySubPackage&#xA;				exit for&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function traceElements (originalElement,copyElement)&#xA;	dim idx&#xA;'	dim originalElement as EA.Element&#xA;'	dim copyElement as EA.Element&#xA;	'add trace relation&#xA;	dim trace as EA.Connector&#xA;	dim connector as EA.Connector&#xA;&#xA;	'delete the original traces if they exist&#xA;	dim keepDeleting&#xA;	keepDeleting = true&#xA;	do&#xA;		 keepDeleting = deleteOriginalTraces(originalElement,copyElement)&#xA;	loop while keepDeleting&#xA;	&#xA;	dim traceExists&#xA;	traceExists = false&#xA;	'check if the connector exists already&#xA;	for each connector in copyElement.Connectors&#xA;		if connector.SupplierID = originalElement.ElementID _&#xA;		AND connector.Type = &quot;Abstraction&quot; _&#xA;		AND connector.Stereotype = &quot;trace&quot; then&#xA;			traceExists = true&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'if it doesn't exist yet we create a new one&#xA;	if traceExists = false then&#xA;&#xA;		for each connector in copyElement.Connectors&#xA;			if connector.Type = &quot;Abstraction&quot; _&#xA;			AND connector.Stereotype = &quot;trace&quot; then&#xA;				&#xA;				connector.Delete()&#xA;				connector.Type = &quot;&quot;&#xA;				'connector.SupplierID = &quot;&quot;				&#xA;				'exit for&#xA;			end if&#xA;		next&#xA;&#xA;&#xA;		set trace = copyElement.Connectors.AddNew(&quot;&quot;,&quot;Abstraction&quot;)&#xA;		trace.SupplierID = originalElement.ElementID&#xA;		trace.Stereotype = &quot;trace&quot;&#xA;		trace.Update&#xA;	end if&#xA;	'trace attributes&#xA;	traceAttributes originalElement,copyElement&#xA;	'trace associations&#xA;	traceAssociations originalElement,copyElement&#xA;end function&#xA;&#xA;function traceAttributes(originalElement,copyElement)&#xA;	dim originalAttribute as EA.Attribute&#xA;	dim copyAttribute as EA.Attribute&#xA;	for each originalAttribute in originalElement.Attributes&#xA;		for each copyAttribute in copyElement.Attributes&#xA;			if copyAttribute.Name = originalAttribute.Name then&#xA;				if isTransform then&#xA;					transformAttribute originalAttribute,originalElement, copyAttribute &#xA;				end if&#xA;				'found match, add trace tag&#xA;				dim traceTag as EA.AttributeTag&#xA;				set traceTag = getExistingOrNewTaggedValue(copyAttribute,&quot;SourceAttribute&quot;)&#xA;				traceTag.Value = originalAttribute.AttributeGUID&#xA;				traceTag.Update&#xA;				exit for&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function traceAssociations (originalElement,copyElement)&#xA;	dim originalConnector as EA.Connector&#xA;	dim copyConnector as EA.Connector&#xA;	for each originalConnector in originalElement.Connectors&#xA;		'we process only associations that start from the original element&#xA;		if (originalConnector.Type = &quot;Association&quot; or originalConnector.Type = &quot;Aggregation&quot;) _&#xA;			AND originalConnector.ClientID =  originalElement.ElementID then&#xA;			for each copyConnector in copyElement.Connectors&#xA;				if copyConnector.Type = originalConnector.Type _&#xA;					AND copyConnector.Name = originalConnector.Name _&#xA;					AND copyConnector.ClientEnd.Cardinality = originalConnector.ClientEnd.Cardinality _&#xA;					AND copyConnector.ClientEnd.Role = originalConnector.ClientEnd.Role _&#xA;					AND copyConnector.ClientEnd.Aggregation = originalConnector.ClientEnd.Aggregation _&#xA;					AND copyConnector.SupplierEnd.Cardinality = originalConnector.SupplierEnd.Cardinality _&#xA;					AND copyConnector.SupplierEnd.Role = originalConnector.SupplierEnd.Role _&#xA;					AND copyConnector.SupplierEnd.Aggregation = originalConnector.SupplierEnd.Aggregation then&#xA;					'connector properties match, now check the other ends&#xA;					dim originalOtherEnd as EA.Element&#xA;					dim copyOtherEnd as EA.Element&#xA;					set originalOtherEnd = Repository.GetElementByID(originalConnector.SupplierID)&#xA;					set copyOtherEnd = Repository.GetElementByID(copyConnector.SupplierID)&#xA;					if copyOtherEnd.Name = originalOtherEnd.Name _&#xA;						or isTransformedFrom(originalOtherEnd, copyOtherEnd) then&#xA;						'associations with stereotype 'tekentechnisch' need to be removed&#xA;						if isTransform AND copyConnector.Stereotype = &quot;Tekentechnisch&quot; then&#xA;							deleteConnector copyElement, copyConnector&#xA;							copyElement.Connectors.Refresh&#xA;						else&#xA;							'transform&#xA;							if isTransform then&#xA;								transformAssociations originalConnector,copyConnector&#xA;							end if&#xA;							'found a match, add trace tag&#xA;							dim traceTag as EA.ConnectorTag&#xA;							set traceTag = getExistingOrNewTaggedValue(copyConnector,&quot;SourceAssociation&quot;)&#xA;							traceTag.Value = originalConnector.ConnectorGUID&#xA;							traceTag.Update&#xA;						end if&#xA;						exit for&#xA;					end if&#xA;				end if&#xA;			next&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function deleteConnector (owner, connector)&#xA;	dim currentConnector as EA.Connector&#xA;	dim i&#xA;	for i = 0 to owner.Connectors.Count -1&#xA;		set currentConnector = owner.Connectors.GetAt(i)&#xA;		if currentConnector.ConnectorID = connector.ConnectorID then&#xA;			owner.Connectors.DeleteAt i,false&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;' the copyElement is transformed from the originalElement if it has a trace relationship to the originalElement&#xA;function isTransformedFrom(originalElement, copyElement)&#xA;	dim connector as EA.Connector&#xA;	isTransformedFrom = false&#xA;	for each connector in copyElement.Connectors&#xA;		if connector.Stereotype = &quot;trace&quot; and connector.SupplierID = originalElement.ElementID then&#xA;			isTransformedFrom = true&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim returnTag as EA.TaggedValue&#xA;	set returnTag = nothing&#xA;	'check if a tag with that name alrady exists&#xA;	for each taggedValue in owner.TaggedValues&#xA;		if taggedValue.Name = tagName then&#xA;			set returnTag = taggedValue&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'create new one if not found&#xA;	if returnTag is nothing then&#xA;		set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;	end if&#xA;	'return&#xA;	set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function transformElement(originalElement,copyElement)&#xA;	'set stereotype&#xA;	select case originalElement.Stereotype&#xA;		case &quot;Objecttype_proxy&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Entiteittype&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Objecttype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Entiteittype&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;'			copyElement.Name = originalElement.Alias&#xA;'			copyElement.Alias = getCamelCase(originalElement.Name)&#xA;		case &quot;Gegevensgroeptype_proxy&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Groep&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Gegevensgroeptype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Groep&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Referentielijst&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Tabel-entiteit&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;'			copyElement.Name = originalElement.Alias&#xA;'			copyElement.Alias = getCamelCase(originalElement.Name)&#xA;		case &quot;Relatieklasse&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Relatie-entiteit&quot;&#xA;			copyElement.Name = getCamelCase(originalElement.Name)&#xA;		case &quot;Complex datatype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Complex datatype&quot;&#xA;		case &quot;Gestructureerd datatype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Complex datatype&quot;&#xA;		case &quot;Enumeratie&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Enumeration&quot;&#xA;		case &quot;Primitief datatype&quot;&#xA;			copyElement.StereotypeEx = profilename &amp; &quot;::Primitief datatype&quot;&#xA;'		case &quot;Keuze&quot;&#xA;'			copyElement.StereotypeEx = profilename &amp; &quot;::Union&quot;&#xA;	end select&#xA;	'remove notes for all elements&#xA;'	copyElement.Notes = &quot;&quot; 'not yet&#xA;	copyElement.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalElement.Notes&#xA;	copyElement.Update&#xA;	'copy tagged values&#xA;	copyTaggedValueValues originalElement, copyElement&#xA;end function&#xA;&#xA;function transformAttribute(originalAttribute,originalElement, copyAttribute)&#xA;	'set stereotype&#xA;	select case originalAttribute.Stereotype&#xA;		case &quot;Attribuutsoort_proxy&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Element&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Attribuutsoort&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Element&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Gegevensgroep_proxy&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Gegevensgroep&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Gegevensgroep&quot;&#xA;			copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;		case &quot;Referentie element&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Tabel element&quot;&#xA;			'copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;'		case &quot;Union element&quot;&#xA;'			copyAttribute.StereotypeEx = &quot;MUG Union Element&quot;&#xA;		case &quot;Data element&quot;&#xA;			copyAttribute.StereotypeEx = profilename &amp; &quot;::Data element&quot;&#xA;	end select&#xA;	&#xA;	'not for enum values. Enum Values have a parent of type enumeration and have not &quot;IsLiteral=0&quot; in the styleEx field&#xA;	if NOT (originalElement.Type = &quot;Enumeration&quot; and not instr(originalAttribute.StyleEx, &quot;IsLiteral=0;&quot;) &gt; 0) then&#xA;		'name =&gt; camelCase&#xA;		copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;	end if&#xA;	'notes&#xA;	copyAttribute.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalAttribute.Notes&#xA;	copyAttribute.Update&#xA;	'cop tagged values&#xA;	copyTaggedValueValues originalAttribute, copyAttribute&#xA;	'kerngegeven stereotype&#xA;'	if isKernGegeven(originalAttribute) then&#xA;'		copyAttribute.StereotypeEx = copyAttribute.StereotypeEx  &amp; &quot;,Kerngegeven&quot;&#xA;'	end if&#xA;end function&#xA;&#xA;function isKernGegeven(attribute)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	isKernGegeven = false&#xA;	for each taggedValue in attribute.TaggedValues&#xA;		if taggedValue.Name = &quot;Indicatie kerngegeven&quot; then&#xA;			if taggedValue.Value = &quot;Ja&quot; then&#xA;				isKernGegeven = true&#xA;			end if&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function transformAssociations (originalConnector,copyConnector)&#xA;	'set stereotype&#xA;	select case originalConnector.Stereotype&#xA;		case &quot;Relatiesoort&quot;&#xA;			copyConnector.StereotypeEx = profilename &amp; &quot;::Relatie&quot;&#xA;		case &quot;Relatieklasse&quot;&#xA;			copyConnector.StereotypeEx = profilename &amp; &quot;::Relatie-entiteit&quot;&#xA;	end select&#xA;	'name =&gt; camelCase&#xA;	copyConnector.Name = getCamelCase(originalConnector.Name)&#xA;	'notes&#xA;	copyConnector.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalConnector.Notes&#xA;	copyConnector.Update&#xA;	'cop tagged values&#xA;	copyTaggedValueValues originalConnector,copyConnector&#xA;end function&#xA;&#xA;function getCamelCase(nameToConvert)&#xA;	  Dim arr, i&#xA;	  arr = Split(nameToConvert, &quot; &quot;)&#xA;	  For i = LBound(arr) To UBound(arr)&#xA;		if i = 0 then&#xA;			arr(i) = LCase(arr(i))&#xA;		else&#xA;			arr(i) = UCase(Left(arr(i), 1)) &amp; LCase(Mid(arr(i), 2))&#xA;		end if&#xA;	  Next&#xA;  getCamelCase = Join(arr, &quot;&quot;)&#xA;end function&#xA;&#xA;function copyTaggedValueValues(originalElement, copyElement)&#xA;	dim copyTV as EA.TaggedValue&#xA;	dim originalTV as EA.TaggedValue&#xA;	for each copyTV in copyElement.TaggedValues&#xA;		for each originalTV in originalElement.TaggedValues&#xA;			if copyTV.Name = originalTV.Name then&#xA;				if copyTV.Name = &quot;Lengte&quot; AND InStr(originalTV.Value,&quot;..&quot;)&gt;0 then&#xA;					dim lengthOfLength&#xA;					lengthOfLength = Len(originalTV.Value)&#xA;					dim lengthOfMinLength&#xA;					lengthOfMinLength = InStr(originalTV.Value,&quot;..&quot;) - 1&#xA;					dim minLengthTV&#xA;					minLengthTV = Left(originalTV.Value,lengthOfMinLength)&#xA;					addAttributeTaggedvalue copyElement, &quot;Minimum lengte&quot;, minLengthTV&#xA;					&#xA;					dim lengthOfMaxLength&#xA;					lengthOfMaxLength = lengthOfLength - lengthOfMinLength - 2&#xA;					dim maxLengthTV&#xA;					maxLengthTV = Right(originalTV.Value,lengthOfMaxLength)&#xA;					copyTV.Value = maxLengthTV&#xA;					copyTV.Notes = originalTV.Notes&#xA;					copyTV.Update&#xA;					exit for&#xA;				else&#xA;					copyTV.Value = originalTV.Value&#xA;					copyTV.Notes = originalTV.Notes&#xA;					copyTV.Update&#xA;					exit for&#xA;				end if&#xA;			end if&#xA;		next&#xA;	next&#xA;end function&#xA;&#xA;function addAttributeTaggedvalue(element, tagName, tagValue)&#xA;	dim elementTaggedValue as EA.TaggedValue &#xA;	set elementTaggedValue = getExistingOrNewTaggedValue(element, tagName)&#xA;	elementTaggedValue.Value = tagValue&#xA;	elementTaggedValue.Update&#xA;end function&#xA;&#xA;function removeTaggedValuesExcept(item, tvsToKeep)&#xA;	dim taggedValue as EA.TaggedValue&#xA;	dim i&#xA;	for i = item.TaggedValues.Count -1 to 0 step -1&#xA;		set taggedValue = item.TaggedValues(i)&#xA;		if not tvsToKeep.contains(taggedValue.Name) then&#xA;			item.TaggedValues.DeleteAt i, false&#xA;		end if	&#xA;	next&#xA;end function&#xA;&#xA;function deleteOriginalTraces(originalElement,copyElement)&#xA;	dim i&#xA;	dim copyConnector as EA.Connector&#xA;	deleteOriginalTraces = false&#xA;	'make sure the connectors are refreshed&#xA;	copyElement.Connectors.Refresh&#xA;	originalElement.Connectors.Refresh&#xA;	'remove all the traces to domain model classes&#xA;	for each copyConnector in copyElement.Connectors&#xA;		if copyConnector.Type = &quot;Abstraction&quot; AND copyConnector.Stereotype = &quot;trace&quot; then&#xA;			'check if the original element has the same trace&#xA;			dim originalConnector as EA.Connector&#xA;			for each originalConnector in originalElement.Connectors&#xA;				if copyConnector.Type = &quot;Abstraction&quot; AND _&#xA;				copyConnector.Stereotype = &quot;trace&quot; AND _&#xA;				copyConnector.SupplierID = originalConnector.SupplierID then&#xA;					deleteConnector copyElement, copyConnector&#xA;					'refresh again and exit function&#xA;					copyElement.Connectors.Refresh&#xA;					originalElement.Connectors.Refresh&#xA;					'found on, try again&#xA;					deleteOriginalTraces = true&#xA;					exit function&#xA;				end if&#xA;			next&#xA;		end if&#xA;	next&#xA;end function&#xA;&#xA;function deleteConnector (owner, connector)&#xA;	dim currentConnector as EA.Connector&#xA;	dim i&#xA;	for i = 0 to owner.Connectors.Count -1&#xA;		set currentConnector = owner.Connectors.GetAt(i)&#xA;		if currentConnector.ConnectorID = connector.ConnectorID then&#xA;			owner.Connectors.DeleteAt i,false&#xA;			exit for&#xA;		end if&#xA;	next&#xA;end function&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="6"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{427C425C-1767-4995-A8A3-A9EB9D81E53F}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;CONTEXTPACKAGE&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Package Group"/>
		</DataRow>
	</DataSet>
</RefData>
